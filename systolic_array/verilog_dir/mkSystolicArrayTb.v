//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov 24 09:35:18 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSystolicArrayTb(CLK,
			 RST_N);
  input  CLK;
  input  RST_N;

  // register count_a
  reg [3 : 0] count_a;
  wire [3 : 0] count_a$D_IN;
  wire count_a$EN;

  // register count_b
  reg [3 : 0] count_b;
  wire [3 : 0] count_b$D_IN;
  wire count_b$EN;

  // register rg_op
  reg [31 : 0] rg_op;
  wire [31 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // ports of submodule sys_unit
  wire [31 : 0] sys_unit$op_0__read,
		sys_unit$op_0__write_1,
		sys_unit$op_10__write_1,
		sys_unit$op_11__write_1,
		sys_unit$op_12__write_1,
		sys_unit$op_13__write_1,
		sys_unit$op_14__write_1,
		sys_unit$op_15__write_1,
		sys_unit$op_1__read,
		sys_unit$op_1__write_1,
		sys_unit$op_2__read,
		sys_unit$op_2__write_1,
		sys_unit$op_3__read,
		sys_unit$op_3__write_1,
		sys_unit$op_4__read,
		sys_unit$op_4__write_1,
		sys_unit$op_5__read,
		sys_unit$op_5__write_1,
		sys_unit$op_6__read,
		sys_unit$op_6__write_1,
		sys_unit$op_7__read,
		sys_unit$op_7__write_1,
		sys_unit$op_8__read,
		sys_unit$op_8__write_1,
		sys_unit$op_9__write_1;
  wire [15 : 0] sys_unit$a_x, sys_unit$b_x;
  wire sys_unit$EN_a,
       sys_unit$EN_b,
       sys_unit$EN_op_0__write,
       sys_unit$EN_op_10__write,
       sys_unit$EN_op_11__write,
       sys_unit$EN_op_12__write,
       sys_unit$EN_op_13__write,
       sys_unit$EN_op_14__write,
       sys_unit$EN_op_15__write,
       sys_unit$EN_op_1__write,
       sys_unit$EN_op_2__write,
       sys_unit$EN_op_3__write,
       sys_unit$EN_op_4__write,
       sys_unit$EN_op_5__write,
       sys_unit$EN_op_6__write,
       sys_unit$EN_op_7__write,
       sys_unit$EN_op_8__write,
       sys_unit$EN_op_9__write,
       sys_unit$RDY_a,
       sys_unit$RDY_b,
       sys_unit$RDY_op_0__read,
       sys_unit$RDY_op_1__read,
       sys_unit$RDY_op_2__read,
       sys_unit$RDY_op_3__read,
       sys_unit$RDY_op_4__read,
       sys_unit$RDY_op_5__read,
       sys_unit$RDY_op_6__read,
       sys_unit$RDY_op_7__read,
       sys_unit$RDY_op_8__read;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_mat_op,
       CAN_FIRE_RL_rl_sys_val1,
       CAN_FIRE_RL_rl_sys_val2,
       WILL_FIRE_RL_rl_mat_op,
       WILL_FIRE_RL_rl_sys_val1,
       WILL_FIRE_RL_rl_sys_val2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h653;
  reg [63 : 0] v__h1297;
  reg [63 : 0] v__h1395;
  reg [63 : 0] v__h1493;
  reg [63 : 0] v__h1591;
  reg [63 : 0] v__h1689;
  reg [63 : 0] v__h1787;
  reg [63 : 0] v__h1885;
  reg [63 : 0] v__h1983;
  // synopsys translate_on

  // remaining internal signals
  wire sys_unit_RDY_op_6__read__5_AND_sys_unit_RDY_op_ETC___d27;

  // submodule sys_unit
  mkSystolicArray sys_unit(.CLK(CLK),
			   .RST_N(RST_N),
			   .a_x(sys_unit$a_x),
			   .b_x(sys_unit$b_x),
			   .op_0__write_1(sys_unit$op_0__write_1),
			   .op_10__write_1(sys_unit$op_10__write_1),
			   .op_11__write_1(sys_unit$op_11__write_1),
			   .op_12__write_1(sys_unit$op_12__write_1),
			   .op_13__write_1(sys_unit$op_13__write_1),
			   .op_14__write_1(sys_unit$op_14__write_1),
			   .op_15__write_1(sys_unit$op_15__write_1),
			   .op_1__write_1(sys_unit$op_1__write_1),
			   .op_2__write_1(sys_unit$op_2__write_1),
			   .op_3__write_1(sys_unit$op_3__write_1),
			   .op_4__write_1(sys_unit$op_4__write_1),
			   .op_5__write_1(sys_unit$op_5__write_1),
			   .op_6__write_1(sys_unit$op_6__write_1),
			   .op_7__write_1(sys_unit$op_7__write_1),
			   .op_8__write_1(sys_unit$op_8__write_1),
			   .op_9__write_1(sys_unit$op_9__write_1),
			   .EN_a(sys_unit$EN_a),
			   .EN_b(sys_unit$EN_b),
			   .EN_op_0__write(sys_unit$EN_op_0__write),
			   .EN_op_1__write(sys_unit$EN_op_1__write),
			   .EN_op_2__write(sys_unit$EN_op_2__write),
			   .EN_op_3__write(sys_unit$EN_op_3__write),
			   .EN_op_4__write(sys_unit$EN_op_4__write),
			   .EN_op_5__write(sys_unit$EN_op_5__write),
			   .EN_op_6__write(sys_unit$EN_op_6__write),
			   .EN_op_7__write(sys_unit$EN_op_7__write),
			   .EN_op_8__write(sys_unit$EN_op_8__write),
			   .EN_op_9__write(sys_unit$EN_op_9__write),
			   .EN_op_10__write(sys_unit$EN_op_10__write),
			   .EN_op_11__write(sys_unit$EN_op_11__write),
			   .EN_op_12__write(sys_unit$EN_op_12__write),
			   .EN_op_13__write(sys_unit$EN_op_13__write),
			   .EN_op_14__write(sys_unit$EN_op_14__write),
			   .EN_op_15__write(sys_unit$EN_op_15__write),
			   .RDY_a(sys_unit$RDY_a),
			   .RDY_b(sys_unit$RDY_b),
			   .RDY_op_0__write(),
			   .op_0__read(sys_unit$op_0__read),
			   .RDY_op_0__read(sys_unit$RDY_op_0__read),
			   .RDY_op_1__write(),
			   .op_1__read(sys_unit$op_1__read),
			   .RDY_op_1__read(sys_unit$RDY_op_1__read),
			   .RDY_op_2__write(),
			   .op_2__read(sys_unit$op_2__read),
			   .RDY_op_2__read(sys_unit$RDY_op_2__read),
			   .RDY_op_3__write(),
			   .op_3__read(sys_unit$op_3__read),
			   .RDY_op_3__read(sys_unit$RDY_op_3__read),
			   .RDY_op_4__write(),
			   .op_4__read(sys_unit$op_4__read),
			   .RDY_op_4__read(sys_unit$RDY_op_4__read),
			   .RDY_op_5__write(),
			   .op_5__read(sys_unit$op_5__read),
			   .RDY_op_5__read(sys_unit$RDY_op_5__read),
			   .RDY_op_6__write(),
			   .op_6__read(sys_unit$op_6__read),
			   .RDY_op_6__read(sys_unit$RDY_op_6__read),
			   .RDY_op_7__write(),
			   .op_7__read(sys_unit$op_7__read),
			   .RDY_op_7__read(sys_unit$RDY_op_7__read),
			   .RDY_op_8__write(),
			   .op_8__read(sys_unit$op_8__read),
			   .RDY_op_8__read(sys_unit$RDY_op_8__read),
			   .RDY_op_9__write(),
			   .op_9__read(),
			   .RDY_op_9__read(),
			   .RDY_op_10__write(),
			   .op_10__read(),
			   .RDY_op_10__read(),
			   .RDY_op_11__write(),
			   .op_11__read(),
			   .RDY_op_11__read(),
			   .RDY_op_12__write(),
			   .op_12__read(),
			   .RDY_op_12__read(),
			   .RDY_op_13__write(),
			   .op_13__read(),
			   .RDY_op_13__read(),
			   .RDY_op_14__write(),
			   .op_14__read(),
			   .RDY_op_14__read(),
			   .RDY_op_15__write(),
			   .op_15__read(),
			   .RDY_op_15__read());

  // rule RL_rl_sys_val1
  assign CAN_FIRE_RL_rl_sys_val1 = sys_unit$RDY_a && count_a < 4'd9 ;
  assign WILL_FIRE_RL_rl_sys_val1 = CAN_FIRE_RL_rl_sys_val1 ;

  // rule RL_rl_sys_val2
  assign CAN_FIRE_RL_rl_sys_val2 = sys_unit$RDY_b && count_b < 4'd9 ;
  assign WILL_FIRE_RL_rl_sys_val2 = CAN_FIRE_RL_rl_sys_val2 ;

  // rule RL_rl_mat_op
  assign CAN_FIRE_RL_rl_mat_op =
	     sys_unit$RDY_op_8__read && sys_unit$RDY_op_7__read &&
	     sys_unit_RDY_op_6__read__5_AND_sys_unit_RDY_op_ETC___d27 &&
	     count_a == 4'd9 &&
	     count_b == 4'd9 ;
  assign WILL_FIRE_RL_rl_mat_op = CAN_FIRE_RL_rl_mat_op ;

  // register count_a
  assign count_a$D_IN = count_a + 4'd1 ;
  assign count_a$EN = sys_unit$RDY_a && count_a < 4'd9 ;

  // register count_b
  assign count_b$D_IN = count_b + 4'd1 ;
  assign count_b$EN = sys_unit$RDY_b && count_b < 4'd9 ;

  // register rg_op
  assign rg_op$D_IN = 32'h0 ;
  assign rg_op$EN = 1'b0 ;

  // submodule sys_unit
  assign sys_unit$a_x = { 12'd625, count_a } ;
  assign sys_unit$b_x = { 12'd625, count_b } ;
  assign sys_unit$op_0__write_1 = 32'h0 ;
  assign sys_unit$op_10__write_1 = 32'h0 ;
  assign sys_unit$op_11__write_1 = 32'h0 ;
  assign sys_unit$op_12__write_1 = 32'h0 ;
  assign sys_unit$op_13__write_1 = 32'h0 ;
  assign sys_unit$op_14__write_1 = 32'h0 ;
  assign sys_unit$op_15__write_1 = 32'h0 ;
  assign sys_unit$op_1__write_1 = 32'h0 ;
  assign sys_unit$op_2__write_1 = 32'h0 ;
  assign sys_unit$op_3__write_1 = 32'h0 ;
  assign sys_unit$op_4__write_1 = 32'h0 ;
  assign sys_unit$op_5__write_1 = 32'h0 ;
  assign sys_unit$op_6__write_1 = 32'h0 ;
  assign sys_unit$op_7__write_1 = 32'h0 ;
  assign sys_unit$op_8__write_1 = 32'h0 ;
  assign sys_unit$op_9__write_1 = 32'h0 ;
  assign sys_unit$EN_a = CAN_FIRE_RL_rl_sys_val1 ;
  assign sys_unit$EN_b = CAN_FIRE_RL_rl_sys_val2 ;
  assign sys_unit$EN_op_0__write = 1'b0 ;
  assign sys_unit$EN_op_1__write = 1'b0 ;
  assign sys_unit$EN_op_2__write = 1'b0 ;
  assign sys_unit$EN_op_3__write = 1'b0 ;
  assign sys_unit$EN_op_4__write = 1'b0 ;
  assign sys_unit$EN_op_5__write = 1'b0 ;
  assign sys_unit$EN_op_6__write = 1'b0 ;
  assign sys_unit$EN_op_7__write = 1'b0 ;
  assign sys_unit$EN_op_8__write = 1'b0 ;
  assign sys_unit$EN_op_9__write = 1'b0 ;
  assign sys_unit$EN_op_10__write = 1'b0 ;
  assign sys_unit$EN_op_11__write = 1'b0 ;
  assign sys_unit$EN_op_12__write = 1'b0 ;
  assign sys_unit$EN_op_13__write = 1'b0 ;
  assign sys_unit$EN_op_14__write = 1'b0 ;
  assign sys_unit$EN_op_15__write = 1'b0 ;

  // remaining internal signals
  assign sys_unit_RDY_op_6__read__5_AND_sys_unit_RDY_op_ETC___d27 =
	     sys_unit$RDY_op_6__read && sys_unit$RDY_op_5__read &&
	     sys_unit$RDY_op_4__read &&
	     sys_unit$RDY_op_3__read &&
	     sys_unit$RDY_op_2__read &&
	     sys_unit$RDY_op_1__read &&
	     sys_unit$RDY_op_0__read ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count_a <= `BSV_ASSIGNMENT_DELAY 4'd0;
	count_b <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_op <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (count_a$EN) count_a <= `BSV_ASSIGNMENT_DELAY count_a$D_IN;
	if (count_b$EN) count_b <= `BSV_ASSIGNMENT_DELAY count_b$D_IN;
	if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count_a = 4'hA;
    count_b = 4'hA;
    rg_op = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op) $display("------------------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	begin
	  v__h653 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	$display(v__h653, "op:%d %d", $signed(32'd0), sys_unit$op_0__read);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	begin
	  v__h1297 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	$display(v__h1297, "op:%d %d", $signed(32'd1), sys_unit$op_1__read);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	begin
	  v__h1395 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	$display(v__h1395, "op:%d %d", $signed(32'd2), sys_unit$op_2__read);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	begin
	  v__h1493 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	$display(v__h1493, "op:%d %d", $signed(32'd3), sys_unit$op_3__read);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	begin
	  v__h1591 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	$display(v__h1591, "op:%d %d", $signed(32'd4), sys_unit$op_4__read);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	begin
	  v__h1689 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	$display(v__h1689, "op:%d %d", $signed(32'd5), sys_unit$op_5__read);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	begin
	  v__h1787 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	$display(v__h1787, "op:%d %d", $signed(32'd6), sys_unit$op_6__read);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	begin
	  v__h1885 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	$display(v__h1885, "op:%d %d", $signed(32'd7), sys_unit$op_7__read);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	begin
	  v__h1983 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_mat_op)
	$display(v__h1983, "op:%d %d", $signed(32'd8), sys_unit$op_8__read);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_mat_op) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkSystolicArrayTb

