//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov 24 09:35:16 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// sum                            O     1
// RDY_sum                        O     1 const
// carry                          O     1
// RDY_carry                      O     1 const
// difference                     O     1
// RDY_difference                 O     1 const
// borrow                         O     1
// RDY_borrow                     O     1 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// sum_a                          I     1
// sum_b                          I     1
// sum_cin                        I     1
// carry_a                        I     1
// carry_b                        I     1
// carry_cin                      I     1
// difference_a                   I     1
// difference_b                   I     1
// difference_bin                 I     1
// borrow_a                       I     1
// borrow_b                       I     1
// borrow_bin                     I     1
//
// Combinational paths from inputs to outputs:
//   (sum_a, sum_b, sum_cin) -> sum
//   (carry_a, carry_b, carry_cin) -> carry
//   (difference_a, difference_b, difference_bin) -> difference
//   (borrow_a, borrow_b, borrow_bin) -> borrow
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfullAdderSubractor(CLK,
			    RST_N,

			    sum_a,
			    sum_b,
			    sum_cin,
			    sum,
			    RDY_sum,

			    carry_a,
			    carry_b,
			    carry_cin,
			    carry,
			    RDY_carry,

			    difference_a,
			    difference_b,
			    difference_bin,
			    difference,
			    RDY_difference,

			    borrow_a,
			    borrow_b,
			    borrow_bin,
			    borrow,
			    RDY_borrow);
  input  CLK;
  input  RST_N;

  // value method sum
  input  sum_a;
  input  sum_b;
  input  sum_cin;
  output sum;
  output RDY_sum;

  // value method carry
  input  carry_a;
  input  carry_b;
  input  carry_cin;
  output carry;
  output RDY_carry;

  // value method difference
  input  difference_a;
  input  difference_b;
  input  difference_bin;
  output difference;
  output RDY_difference;

  // value method borrow
  input  borrow_a;
  input  borrow_b;
  input  borrow_bin;
  output borrow;
  output RDY_borrow;

  // signals for module outputs
  wire RDY_borrow,
       RDY_carry,
       RDY_difference,
       RDY_sum,
       borrow,
       carry,
       difference,
       sum;

  // remaining internal signals
  wire x__h110,
       x__h112,
       x__h43,
       x__h64,
       x__h66,
       x__h88,
       y__h111,
       y__h113,
       y__h115,
       y__h65,
       y__h67,
       y__h89;

  // value method sum
  assign sum = x__h43 ^ sum_cin ;
  assign RDY_sum = 1'd1 ;

  // value method carry
  assign carry = x__h64 | y__h65 ;
  assign RDY_carry = 1'd1 ;

  // value method difference
  assign difference = x__h88 ^ difference_bin ;
  assign RDY_difference = 1'd1 ;

  // value method borrow
  assign borrow = x__h110 | y__h111 ;
  assign RDY_borrow = 1'd1 ;

  // remaining internal signals
  assign x__h110 = x__h112 | y__h113 ;
  assign x__h112 = borrow_a & y__h115 ;
  assign x__h43 = sum_a ^ sum_b ;
  assign x__h64 = x__h66 | y__h67 ;
  assign x__h66 = carry_a & carry_b ;
  assign x__h88 = difference_a ^ y__h89 ;
  assign y__h111 = borrow_bin & y__h115 ;
  assign y__h113 = borrow_bin & borrow_a ;
  assign y__h115 = ~borrow_b ;
  assign y__h65 = carry_cin & carry_a ;
  assign y__h67 = carry_b & carry_cin ;
  assign y__h89 = ~difference_b ;
endmodule  // mkfullAdderSubractor

