//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov 24 09:35:18 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_a                          O     1
// RDY_b                          O     1
// RDY_op_0__write                O     1 reg
// op_0__read                     O    32 reg
// RDY_op_0__read                 O     1 reg
// RDY_op_1__write                O     1 reg
// op_1__read                     O    32 reg
// RDY_op_1__read                 O     1 reg
// RDY_op_2__write                O     1 reg
// op_2__read                     O    32 reg
// RDY_op_2__read                 O     1 reg
// RDY_op_3__write                O     1 reg
// op_3__read                     O    32 reg
// RDY_op_3__read                 O     1 reg
// RDY_op_4__write                O     1 reg
// op_4__read                     O    32 reg
// RDY_op_4__read                 O     1 reg
// RDY_op_5__write                O     1 reg
// op_5__read                     O    32 reg
// RDY_op_5__read                 O     1 reg
// RDY_op_6__write                O     1 reg
// op_6__read                     O    32 reg
// RDY_op_6__read                 O     1 reg
// RDY_op_7__write                O     1 reg
// op_7__read                     O    32 reg
// RDY_op_7__read                 O     1 reg
// RDY_op_8__write                O     1 reg
// op_8__read                     O    32 reg
// RDY_op_8__read                 O     1 reg
// RDY_op_9__write                O     1 reg
// op_9__read                     O    32 reg
// RDY_op_9__read                 O     1 reg
// RDY_op_10__write               O     1 reg
// op_10__read                    O    32 reg
// RDY_op_10__read                O     1 reg
// RDY_op_11__write               O     1 reg
// op_11__read                    O    32 reg
// RDY_op_11__read                O     1 reg
// RDY_op_12__write               O     1 reg
// op_12__read                    O    32 reg
// RDY_op_12__read                O     1 reg
// RDY_op_13__write               O     1 reg
// op_13__read                    O    32 reg
// RDY_op_13__read                O     1 reg
// RDY_op_14__write               O     1 reg
// op_14__read                    O    32 reg
// RDY_op_14__read                O     1 reg
// RDY_op_15__write               O     1 reg
// op_15__read                    O    32 reg
// RDY_op_15__read                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// a_x                            I    16 reg
// b_x                            I    16 reg
// op_0__write_1                  I    32
// op_1__write_1                  I    32
// op_2__write_1                  I    32
// op_3__write_1                  I    32
// op_4__write_1                  I    32
// op_5__write_1                  I    32
// op_6__write_1                  I    32
// op_7__write_1                  I    32
// op_8__write_1                  I    32
// op_9__write_1                  I    32
// op_10__write_1                 I    32
// op_11__write_1                 I    32
// op_12__write_1                 I    32
// op_13__write_1                 I    32
// op_14__write_1                 I    32
// op_15__write_1                 I    32
// EN_a                           I     1
// EN_b                           I     1
// EN_op_0__write                 I     1
// EN_op_1__write                 I     1
// EN_op_2__write                 I     1
// EN_op_3__write                 I     1
// EN_op_4__write                 I     1
// EN_op_5__write                 I     1
// EN_op_6__write                 I     1
// EN_op_7__write                 I     1
// EN_op_8__write                 I     1
// EN_op_9__write                 I     1
// EN_op_10__write                I     1
// EN_op_11__write                I     1
// EN_op_12__write                I     1
// EN_op_13__write                I     1
// EN_op_14__write                I     1
// EN_op_15__write                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSystolicArray(CLK,
		       RST_N,

		       a_x,
		       EN_a,
		       RDY_a,

		       b_x,
		       EN_b,
		       RDY_b,

		       op_0__write_1,
		       EN_op_0__write,
		       RDY_op_0__write,

		       op_0__read,
		       RDY_op_0__read,

		       op_1__write_1,
		       EN_op_1__write,
		       RDY_op_1__write,

		       op_1__read,
		       RDY_op_1__read,

		       op_2__write_1,
		       EN_op_2__write,
		       RDY_op_2__write,

		       op_2__read,
		       RDY_op_2__read,

		       op_3__write_1,
		       EN_op_3__write,
		       RDY_op_3__write,

		       op_3__read,
		       RDY_op_3__read,

		       op_4__write_1,
		       EN_op_4__write,
		       RDY_op_4__write,

		       op_4__read,
		       RDY_op_4__read,

		       op_5__write_1,
		       EN_op_5__write,
		       RDY_op_5__write,

		       op_5__read,
		       RDY_op_5__read,

		       op_6__write_1,
		       EN_op_6__write,
		       RDY_op_6__write,

		       op_6__read,
		       RDY_op_6__read,

		       op_7__write_1,
		       EN_op_7__write,
		       RDY_op_7__write,

		       op_7__read,
		       RDY_op_7__read,

		       op_8__write_1,
		       EN_op_8__write,
		       RDY_op_8__write,

		       op_8__read,
		       RDY_op_8__read,

		       op_9__write_1,
		       EN_op_9__write,
		       RDY_op_9__write,

		       op_9__read,
		       RDY_op_9__read,

		       op_10__write_1,
		       EN_op_10__write,
		       RDY_op_10__write,

		       op_10__read,
		       RDY_op_10__read,

		       op_11__write_1,
		       EN_op_11__write,
		       RDY_op_11__write,

		       op_11__read,
		       RDY_op_11__read,

		       op_12__write_1,
		       EN_op_12__write,
		       RDY_op_12__write,

		       op_12__read,
		       RDY_op_12__read,

		       op_13__write_1,
		       EN_op_13__write,
		       RDY_op_13__write,

		       op_13__read,
		       RDY_op_13__read,

		       op_14__write_1,
		       EN_op_14__write,
		       RDY_op_14__write,

		       op_14__read,
		       RDY_op_14__read,

		       op_15__write_1,
		       EN_op_15__write,
		       RDY_op_15__write,

		       op_15__read,
		       RDY_op_15__read);
  input  CLK;
  input  RST_N;

  // action method a
  input  [15 : 0] a_x;
  input  EN_a;
  output RDY_a;

  // action method b
  input  [15 : 0] b_x;
  input  EN_b;
  output RDY_b;

  // action method op_0__write
  input  [31 : 0] op_0__write_1;
  input  EN_op_0__write;
  output RDY_op_0__write;

  // value method op_0__read
  output [31 : 0] op_0__read;
  output RDY_op_0__read;

  // action method op_1__write
  input  [31 : 0] op_1__write_1;
  input  EN_op_1__write;
  output RDY_op_1__write;

  // value method op_1__read
  output [31 : 0] op_1__read;
  output RDY_op_1__read;

  // action method op_2__write
  input  [31 : 0] op_2__write_1;
  input  EN_op_2__write;
  output RDY_op_2__write;

  // value method op_2__read
  output [31 : 0] op_2__read;
  output RDY_op_2__read;

  // action method op_3__write
  input  [31 : 0] op_3__write_1;
  input  EN_op_3__write;
  output RDY_op_3__write;

  // value method op_3__read
  output [31 : 0] op_3__read;
  output RDY_op_3__read;

  // action method op_4__write
  input  [31 : 0] op_4__write_1;
  input  EN_op_4__write;
  output RDY_op_4__write;

  // value method op_4__read
  output [31 : 0] op_4__read;
  output RDY_op_4__read;

  // action method op_5__write
  input  [31 : 0] op_5__write_1;
  input  EN_op_5__write;
  output RDY_op_5__write;

  // value method op_5__read
  output [31 : 0] op_5__read;
  output RDY_op_5__read;

  // action method op_6__write
  input  [31 : 0] op_6__write_1;
  input  EN_op_6__write;
  output RDY_op_6__write;

  // value method op_6__read
  output [31 : 0] op_6__read;
  output RDY_op_6__read;

  // action method op_7__write
  input  [31 : 0] op_7__write_1;
  input  EN_op_7__write;
  output RDY_op_7__write;

  // value method op_7__read
  output [31 : 0] op_7__read;
  output RDY_op_7__read;

  // action method op_8__write
  input  [31 : 0] op_8__write_1;
  input  EN_op_8__write;
  output RDY_op_8__write;

  // value method op_8__read
  output [31 : 0] op_8__read;
  output RDY_op_8__read;

  // action method op_9__write
  input  [31 : 0] op_9__write_1;
  input  EN_op_9__write;
  output RDY_op_9__write;

  // value method op_9__read
  output [31 : 0] op_9__read;
  output RDY_op_9__read;

  // action method op_10__write
  input  [31 : 0] op_10__write_1;
  input  EN_op_10__write;
  output RDY_op_10__write;

  // value method op_10__read
  output [31 : 0] op_10__read;
  output RDY_op_10__read;

  // action method op_11__write
  input  [31 : 0] op_11__write_1;
  input  EN_op_11__write;
  output RDY_op_11__write;

  // value method op_11__read
  output [31 : 0] op_11__read;
  output RDY_op_11__read;

  // action method op_12__write
  input  [31 : 0] op_12__write_1;
  input  EN_op_12__write;
  output RDY_op_12__write;

  // value method op_12__read
  output [31 : 0] op_12__read;
  output RDY_op_12__read;

  // action method op_13__write
  input  [31 : 0] op_13__write_1;
  input  EN_op_13__write;
  output RDY_op_13__write;

  // value method op_13__read
  output [31 : 0] op_13__read;
  output RDY_op_13__read;

  // action method op_14__write
  input  [31 : 0] op_14__write_1;
  input  EN_op_14__write;
  output RDY_op_14__write;

  // value method op_14__read
  output [31 : 0] op_14__read;
  output RDY_op_14__read;

  // action method op_15__write
  input  [31 : 0] op_15__write_1;
  input  EN_op_15__write;
  output RDY_op_15__write;

  // value method op_15__read
  output [31 : 0] op_15__read;
  output RDY_op_15__read;

  // signals for module outputs
  wire [31 : 0] op_0__read,
		op_10__read,
		op_11__read,
		op_12__read,
		op_13__read,
		op_14__read,
		op_15__read,
		op_1__read,
		op_2__read,
		op_3__read,
		op_4__read,
		op_5__read,
		op_6__read,
		op_7__read,
		op_8__read,
		op_9__read;
  wire RDY_a,
       RDY_b,
       RDY_op_0__read,
       RDY_op_0__write,
       RDY_op_10__read,
       RDY_op_10__write,
       RDY_op_11__read,
       RDY_op_11__write,
       RDY_op_12__read,
       RDY_op_12__write,
       RDY_op_13__read,
       RDY_op_13__write,
       RDY_op_14__read,
       RDY_op_14__write,
       RDY_op_15__read,
       RDY_op_15__write,
       RDY_op_1__read,
       RDY_op_1__write,
       RDY_op_2__read,
       RDY_op_2__write,
       RDY_op_3__read,
       RDY_op_3__write,
       RDY_op_4__read,
       RDY_op_4__write,
       RDY_op_5__read,
       RDY_op_5__write,
       RDY_op_6__read,
       RDY_op_6__write,
       RDY_op_7__read,
       RDY_op_7__write,
       RDY_op_8__read,
       RDY_op_8__write,
       RDY_op_9__read,
       RDY_op_9__write;

  // register a_idx
  reg [31 : 0] a_idx;
  wire [31 : 0] a_idx$D_IN;
  wire a_idx$EN;

  // register a_init_idx
  reg [31 : 0] a_init_idx;
  wire [31 : 0] a_init_idx$D_IN;
  wire a_init_idx$EN;

  // register b_idx
  reg [31 : 0] b_idx;
  wire [31 : 0] b_idx$D_IN;
  wire b_idx$EN;

  // register b_init_idx
  reg [31 : 0] b_init_idx;
  wire [31 : 0] b_init_idx$D_IN;
  wire b_init_idx$EN;

  // register count_a
  reg [4 : 0] count_a;
  wire [4 : 0] count_a$D_IN;
  wire count_a$EN;

  // register count_b
  reg [3 : 0] count_b;
  wire [3 : 0] count_b$D_IN;
  wire count_b$EN;

  // register get_pop
  reg get_pop;
  wire get_pop$D_IN, get_pop$EN;

  // register got_a
  reg got_a;
  wire got_a$D_IN, got_a$EN;

  // register got_b
  reg got_b;
  wire got_b$D_IN, got_b$EN;

  // register got_op
  reg got_op;
  wire got_op$D_IN, got_op$EN;

  // register ipReady
  reg ipReady;
  wire ipReady$D_IN, ipReady$EN;

  // register mac_idx
  reg [31 : 0] mac_idx;
  wire [31 : 0] mac_idx$D_IN;
  wire mac_idx$EN;

  // register opReady
  reg opReady;
  wire opReady$D_IN, opReady$EN;

  // register op_idx
  reg [31 : 0] op_idx;
  wire [31 : 0] op_idx$D_IN;
  wire op_idx$EN;

  // register rg_a
  reg [15 : 0] rg_a;
  wire [15 : 0] rg_a$D_IN;
  wire rg_a$EN;

  // register rg_b
  reg [15 : 0] rg_b;
  wire [15 : 0] rg_b$D_IN;
  wire rg_b$EN;

  // register rg_reset
  reg rg_reset;
  wire rg_reset$D_IN, rg_reset$EN;

  // register row_idx
  reg [1 : 0] row_idx;
  wire [1 : 0] row_idx$D_IN;
  wire row_idx$EN;

  // register vrg_a_0
  reg [15 : 0] vrg_a_0;
  wire [15 : 0] vrg_a_0$D_IN;
  wire vrg_a_0$EN;

  // register vrg_a_1
  reg [15 : 0] vrg_a_1;
  wire [15 : 0] vrg_a_1$D_IN;
  wire vrg_a_1$EN;

  // register vrg_a_10
  reg [15 : 0] vrg_a_10;
  wire [15 : 0] vrg_a_10$D_IN;
  wire vrg_a_10$EN;

  // register vrg_a_11
  reg [15 : 0] vrg_a_11;
  wire [15 : 0] vrg_a_11$D_IN;
  wire vrg_a_11$EN;

  // register vrg_a_12
  reg [15 : 0] vrg_a_12;
  wire [15 : 0] vrg_a_12$D_IN;
  wire vrg_a_12$EN;

  // register vrg_a_13
  reg [15 : 0] vrg_a_13;
  wire [15 : 0] vrg_a_13$D_IN;
  wire vrg_a_13$EN;

  // register vrg_a_14
  reg [15 : 0] vrg_a_14;
  wire [15 : 0] vrg_a_14$D_IN;
  wire vrg_a_14$EN;

  // register vrg_a_15
  reg [15 : 0] vrg_a_15;
  wire [15 : 0] vrg_a_15$D_IN;
  wire vrg_a_15$EN;

  // register vrg_a_16
  reg [15 : 0] vrg_a_16;
  wire [15 : 0] vrg_a_16$D_IN;
  wire vrg_a_16$EN;

  // register vrg_a_17
  reg [15 : 0] vrg_a_17;
  wire [15 : 0] vrg_a_17$D_IN;
  wire vrg_a_17$EN;

  // register vrg_a_18
  reg [15 : 0] vrg_a_18;
  wire [15 : 0] vrg_a_18$D_IN;
  wire vrg_a_18$EN;

  // register vrg_a_19
  reg [15 : 0] vrg_a_19;
  wire [15 : 0] vrg_a_19$D_IN;
  wire vrg_a_19$EN;

  // register vrg_a_2
  reg [15 : 0] vrg_a_2;
  wire [15 : 0] vrg_a_2$D_IN;
  wire vrg_a_2$EN;

  // register vrg_a_20
  reg [15 : 0] vrg_a_20;
  wire [15 : 0] vrg_a_20$D_IN;
  wire vrg_a_20$EN;

  // register vrg_a_21
  reg [15 : 0] vrg_a_21;
  wire [15 : 0] vrg_a_21$D_IN;
  wire vrg_a_21$EN;

  // register vrg_a_22
  reg [15 : 0] vrg_a_22;
  wire [15 : 0] vrg_a_22$D_IN;
  wire vrg_a_22$EN;

  // register vrg_a_23
  reg [15 : 0] vrg_a_23;
  wire [15 : 0] vrg_a_23$D_IN;
  wire vrg_a_23$EN;

  // register vrg_a_3
  reg [15 : 0] vrg_a_3;
  wire [15 : 0] vrg_a_3$D_IN;
  wire vrg_a_3$EN;

  // register vrg_a_4
  reg [15 : 0] vrg_a_4;
  wire [15 : 0] vrg_a_4$D_IN;
  wire vrg_a_4$EN;

  // register vrg_a_5
  reg [15 : 0] vrg_a_5;
  wire [15 : 0] vrg_a_5$D_IN;
  wire vrg_a_5$EN;

  // register vrg_a_6
  reg [15 : 0] vrg_a_6;
  wire [15 : 0] vrg_a_6$D_IN;
  wire vrg_a_6$EN;

  // register vrg_a_7
  reg [15 : 0] vrg_a_7;
  wire [15 : 0] vrg_a_7$D_IN;
  wire vrg_a_7$EN;

  // register vrg_a_8
  reg [15 : 0] vrg_a_8;
  wire [15 : 0] vrg_a_8$D_IN;
  wire vrg_a_8$EN;

  // register vrg_a_9
  reg [15 : 0] vrg_a_9;
  wire [15 : 0] vrg_a_9$D_IN;
  wire vrg_a_9$EN;

  // register vrg_b_0
  reg [15 : 0] vrg_b_0;
  wire [15 : 0] vrg_b_0$D_IN;
  wire vrg_b_0$EN;

  // register vrg_b_1
  reg [15 : 0] vrg_b_1;
  wire [15 : 0] vrg_b_1$D_IN;
  wire vrg_b_1$EN;

  // register vrg_b_10
  reg [15 : 0] vrg_b_10;
  wire [15 : 0] vrg_b_10$D_IN;
  wire vrg_b_10$EN;

  // register vrg_b_11
  reg [15 : 0] vrg_b_11;
  wire [15 : 0] vrg_b_11$D_IN;
  wire vrg_b_11$EN;

  // register vrg_b_12
  reg [15 : 0] vrg_b_12;
  wire [15 : 0] vrg_b_12$D_IN;
  wire vrg_b_12$EN;

  // register vrg_b_13
  reg [15 : 0] vrg_b_13;
  wire [15 : 0] vrg_b_13$D_IN;
  wire vrg_b_13$EN;

  // register vrg_b_14
  reg [15 : 0] vrg_b_14;
  wire [15 : 0] vrg_b_14$D_IN;
  wire vrg_b_14$EN;

  // register vrg_b_15
  reg [15 : 0] vrg_b_15;
  wire [15 : 0] vrg_b_15$D_IN;
  wire vrg_b_15$EN;

  // register vrg_b_2
  reg [15 : 0] vrg_b_2;
  wire [15 : 0] vrg_b_2$D_IN;
  wire vrg_b_2$EN;

  // register vrg_b_3
  reg [15 : 0] vrg_b_3;
  wire [15 : 0] vrg_b_3$D_IN;
  wire vrg_b_3$EN;

  // register vrg_b_4
  reg [15 : 0] vrg_b_4;
  wire [15 : 0] vrg_b_4$D_IN;
  wire vrg_b_4$EN;

  // register vrg_b_5
  reg [15 : 0] vrg_b_5;
  wire [15 : 0] vrg_b_5$D_IN;
  wire vrg_b_5$EN;

  // register vrg_b_6
  reg [15 : 0] vrg_b_6;
  wire [15 : 0] vrg_b_6$D_IN;
  wire vrg_b_6$EN;

  // register vrg_b_7
  reg [15 : 0] vrg_b_7;
  wire [15 : 0] vrg_b_7$D_IN;
  wire vrg_b_7$EN;

  // register vrg_b_8
  reg [15 : 0] vrg_b_8;
  wire [15 : 0] vrg_b_8$D_IN;
  wire vrg_b_8$EN;

  // register vrg_b_9
  reg [15 : 0] vrg_b_9;
  wire [15 : 0] vrg_b_9$D_IN;
  wire vrg_b_9$EN;

  // register vrg_c_0
  reg [31 : 0] vrg_c_0;
  wire [31 : 0] vrg_c_0$D_IN;
  wire vrg_c_0$EN;

  // register vrg_c_1
  reg [31 : 0] vrg_c_1;
  wire [31 : 0] vrg_c_1$D_IN;
  wire vrg_c_1$EN;

  // register vrg_c_10
  reg [31 : 0] vrg_c_10;
  wire [31 : 0] vrg_c_10$D_IN;
  wire vrg_c_10$EN;

  // register vrg_c_11
  reg [31 : 0] vrg_c_11;
  wire [31 : 0] vrg_c_11$D_IN;
  wire vrg_c_11$EN;

  // register vrg_c_12
  reg [31 : 0] vrg_c_12;
  wire [31 : 0] vrg_c_12$D_IN;
  wire vrg_c_12$EN;

  // register vrg_c_13
  reg [31 : 0] vrg_c_13;
  wire [31 : 0] vrg_c_13$D_IN;
  wire vrg_c_13$EN;

  // register vrg_c_14
  reg [31 : 0] vrg_c_14;
  wire [31 : 0] vrg_c_14$D_IN;
  wire vrg_c_14$EN;

  // register vrg_c_15
  reg [31 : 0] vrg_c_15;
  wire [31 : 0] vrg_c_15$D_IN;
  wire vrg_c_15$EN;

  // register vrg_c_2
  reg [31 : 0] vrg_c_2;
  wire [31 : 0] vrg_c_2$D_IN;
  wire vrg_c_2$EN;

  // register vrg_c_3
  reg [31 : 0] vrg_c_3;
  wire [31 : 0] vrg_c_3$D_IN;
  wire vrg_c_3$EN;

  // register vrg_c_4
  reg [31 : 0] vrg_c_4;
  wire [31 : 0] vrg_c_4$D_IN;
  wire vrg_c_4$EN;

  // register vrg_c_5
  reg [31 : 0] vrg_c_5;
  wire [31 : 0] vrg_c_5$D_IN;
  wire vrg_c_5$EN;

  // register vrg_c_6
  reg [31 : 0] vrg_c_6;
  wire [31 : 0] vrg_c_6$D_IN;
  wire vrg_c_6$EN;

  // register vrg_c_7
  reg [31 : 0] vrg_c_7;
  wire [31 : 0] vrg_c_7$D_IN;
  wire vrg_c_7$EN;

  // register vrg_c_8
  reg [31 : 0] vrg_c_8;
  wire [31 : 0] vrg_c_8$D_IN;
  wire vrg_c_8$EN;

  // register vrg_c_9
  reg [31 : 0] vrg_c_9;
  wire [31 : 0] vrg_c_9$D_IN;
  wire vrg_c_9$EN;

  // register vrg_op_0
  reg [31 : 0] vrg_op_0;
  wire [31 : 0] vrg_op_0$D_IN;
  wire vrg_op_0$EN;

  // register vrg_op_1
  reg [31 : 0] vrg_op_1;
  wire [31 : 0] vrg_op_1$D_IN;
  wire vrg_op_1$EN;

  // register vrg_op_10
  reg [31 : 0] vrg_op_10;
  wire [31 : 0] vrg_op_10$D_IN;
  wire vrg_op_10$EN;

  // register vrg_op_11
  reg [31 : 0] vrg_op_11;
  wire [31 : 0] vrg_op_11$D_IN;
  wire vrg_op_11$EN;

  // register vrg_op_12
  reg [31 : 0] vrg_op_12;
  wire [31 : 0] vrg_op_12$D_IN;
  wire vrg_op_12$EN;

  // register vrg_op_13
  reg [31 : 0] vrg_op_13;
  wire [31 : 0] vrg_op_13$D_IN;
  wire vrg_op_13$EN;

  // register vrg_op_14
  reg [31 : 0] vrg_op_14;
  wire [31 : 0] vrg_op_14$D_IN;
  wire vrg_op_14$EN;

  // register vrg_op_15
  reg [31 : 0] vrg_op_15;
  wire [31 : 0] vrg_op_15$D_IN;
  wire vrg_op_15$EN;

  // register vrg_op_2
  reg [31 : 0] vrg_op_2;
  wire [31 : 0] vrg_op_2$D_IN;
  wire vrg_op_2$EN;

  // register vrg_op_3
  reg [31 : 0] vrg_op_3;
  wire [31 : 0] vrg_op_3$D_IN;
  wire vrg_op_3$EN;

  // register vrg_op_4
  reg [31 : 0] vrg_op_4;
  wire [31 : 0] vrg_op_4$D_IN;
  wire vrg_op_4$EN;

  // register vrg_op_5
  reg [31 : 0] vrg_op_5;
  wire [31 : 0] vrg_op_5$D_IN;
  wire vrg_op_5$EN;

  // register vrg_op_6
  reg [31 : 0] vrg_op_6;
  wire [31 : 0] vrg_op_6$D_IN;
  wire vrg_op_6$EN;

  // register vrg_op_7
  reg [31 : 0] vrg_op_7;
  wire [31 : 0] vrg_op_7$D_IN;
  wire vrg_op_7$EN;

  // register vrg_op_8
  reg [31 : 0] vrg_op_8;
  wire [31 : 0] vrg_op_8$D_IN;
  wire vrg_op_8$EN;

  // register vrg_op_9
  reg [31 : 0] vrg_op_9;
  wire [31 : 0] vrg_op_9$D_IN;
  wire vrg_op_9$EN;

  // ports of submodule sys_array_0
  reg [31 : 0] sys_array_0$c_x;
  reg [15 : 0] sys_array_0$a_x, sys_array_0$b_x;
  wire [31 : 0] sys_array_0$mac_op;
  wire sys_array_0$EN_a,
       sys_array_0$EN_b,
       sys_array_0$EN_c,
       sys_array_0$EN_mac_op,
       sys_array_0$RDY_mac_op;

  // ports of submodule sys_array_1
  wire [31 : 0] sys_array_1$c_x, sys_array_1$mac_op;
  wire [15 : 0] sys_array_1$a_x, sys_array_1$b_x;
  wire sys_array_1$EN_a,
       sys_array_1$EN_b,
       sys_array_1$EN_c,
       sys_array_1$EN_mac_op,
       sys_array_1$RDY_mac_op;

  // ports of submodule sys_array_10
  wire [31 : 0] sys_array_10$c_x, sys_array_10$mac_op;
  wire [15 : 0] sys_array_10$a_x, sys_array_10$b_x;
  wire sys_array_10$EN_a,
       sys_array_10$EN_b,
       sys_array_10$EN_c,
       sys_array_10$EN_mac_op,
       sys_array_10$RDY_mac_op;

  // ports of submodule sys_array_11
  wire [31 : 0] sys_array_11$c_x, sys_array_11$mac_op;
  wire [15 : 0] sys_array_11$a_x, sys_array_11$b_x;
  wire sys_array_11$EN_a,
       sys_array_11$EN_b,
       sys_array_11$EN_c,
       sys_array_11$EN_mac_op,
       sys_array_11$RDY_mac_op;

  // ports of submodule sys_array_12
  wire [31 : 0] sys_array_12$c_x, sys_array_12$mac_op;
  wire [15 : 0] sys_array_12$a_x, sys_array_12$b_x;
  wire sys_array_12$EN_a,
       sys_array_12$EN_b,
       sys_array_12$EN_c,
       sys_array_12$EN_mac_op,
       sys_array_12$RDY_mac_op;

  // ports of submodule sys_array_13
  wire [31 : 0] sys_array_13$c_x, sys_array_13$mac_op;
  wire [15 : 0] sys_array_13$a_x, sys_array_13$b_x;
  wire sys_array_13$EN_a,
       sys_array_13$EN_b,
       sys_array_13$EN_c,
       sys_array_13$EN_mac_op,
       sys_array_13$RDY_mac_op;

  // ports of submodule sys_array_14
  wire [31 : 0] sys_array_14$c_x, sys_array_14$mac_op;
  wire [15 : 0] sys_array_14$a_x, sys_array_14$b_x;
  wire sys_array_14$EN_a,
       sys_array_14$EN_b,
       sys_array_14$EN_c,
       sys_array_14$EN_mac_op,
       sys_array_14$RDY_mac_op;

  // ports of submodule sys_array_15
  wire [31 : 0] sys_array_15$c_x, sys_array_15$mac_op;
  wire [15 : 0] sys_array_15$a_x, sys_array_15$b_x;
  wire sys_array_15$EN_a,
       sys_array_15$EN_b,
       sys_array_15$EN_c,
       sys_array_15$EN_mac_op,
       sys_array_15$RDY_mac_op;

  // ports of submodule sys_array_2
  wire [31 : 0] sys_array_2$c_x, sys_array_2$mac_op;
  wire [15 : 0] sys_array_2$a_x, sys_array_2$b_x;
  wire sys_array_2$EN_a,
       sys_array_2$EN_b,
       sys_array_2$EN_c,
       sys_array_2$EN_mac_op,
       sys_array_2$RDY_mac_op;

  // ports of submodule sys_array_3
  wire [31 : 0] sys_array_3$c_x, sys_array_3$mac_op;
  wire [15 : 0] sys_array_3$a_x, sys_array_3$b_x;
  wire sys_array_3$EN_a,
       sys_array_3$EN_b,
       sys_array_3$EN_c,
       sys_array_3$EN_mac_op,
       sys_array_3$RDY_mac_op;

  // ports of submodule sys_array_4
  wire [31 : 0] sys_array_4$c_x, sys_array_4$mac_op;
  wire [15 : 0] sys_array_4$a_x, sys_array_4$b_x;
  wire sys_array_4$EN_a,
       sys_array_4$EN_b,
       sys_array_4$EN_c,
       sys_array_4$EN_mac_op,
       sys_array_4$RDY_mac_op;

  // ports of submodule sys_array_5
  wire [31 : 0] sys_array_5$c_x, sys_array_5$mac_op;
  wire [15 : 0] sys_array_5$a_x, sys_array_5$b_x;
  wire sys_array_5$EN_a,
       sys_array_5$EN_b,
       sys_array_5$EN_c,
       sys_array_5$EN_mac_op,
       sys_array_5$RDY_mac_op;

  // ports of submodule sys_array_6
  wire [31 : 0] sys_array_6$c_x, sys_array_6$mac_op;
  wire [15 : 0] sys_array_6$a_x, sys_array_6$b_x;
  wire sys_array_6$EN_a,
       sys_array_6$EN_b,
       sys_array_6$EN_c,
       sys_array_6$EN_mac_op,
       sys_array_6$RDY_mac_op;

  // ports of submodule sys_array_7
  wire [31 : 0] sys_array_7$c_x, sys_array_7$mac_op;
  wire [15 : 0] sys_array_7$a_x, sys_array_7$b_x;
  wire sys_array_7$EN_a,
       sys_array_7$EN_b,
       sys_array_7$EN_c,
       sys_array_7$EN_mac_op,
       sys_array_7$RDY_mac_op;

  // ports of submodule sys_array_8
  wire [31 : 0] sys_array_8$c_x, sys_array_8$mac_op;
  wire [15 : 0] sys_array_8$a_x, sys_array_8$b_x;
  wire sys_array_8$EN_a,
       sys_array_8$EN_b,
       sys_array_8$EN_c,
       sys_array_8$EN_mac_op,
       sys_array_8$RDY_mac_op;

  // ports of submodule sys_array_9
  wire [31 : 0] sys_array_9$c_x, sys_array_9$mac_op;
  wire [15 : 0] sys_array_9$a_x, sys_array_9$b_x;
  wire sys_array_9$EN_a,
       sys_array_9$EN_b,
       sys_array_9$EN_c,
       sys_array_9$EN_mac_op,
       sys_array_9$RDY_mac_op;

  // rule scheduling signals
  wire CAN_FIRE_RL_got_ips,
       CAN_FIRE_RL_ip_a,
       CAN_FIRE_RL_ip_b,
       CAN_FIRE_RL_put_ips,
       CAN_FIRE_RL_put_op,
       CAN_FIRE_RL_start_row,
       CAN_FIRE_a,
       CAN_FIRE_b,
       CAN_FIRE_op_0__write,
       CAN_FIRE_op_10__write,
       CAN_FIRE_op_11__write,
       CAN_FIRE_op_12__write,
       CAN_FIRE_op_13__write,
       CAN_FIRE_op_14__write,
       CAN_FIRE_op_15__write,
       CAN_FIRE_op_1__write,
       CAN_FIRE_op_2__write,
       CAN_FIRE_op_3__write,
       CAN_FIRE_op_4__write,
       CAN_FIRE_op_5__write,
       CAN_FIRE_op_6__write,
       CAN_FIRE_op_7__write,
       CAN_FIRE_op_8__write,
       CAN_FIRE_op_9__write,
       WILL_FIRE_RL_got_ips,
       WILL_FIRE_RL_ip_a,
       WILL_FIRE_RL_ip_b,
       WILL_FIRE_RL_put_ips,
       WILL_FIRE_RL_put_op,
       WILL_FIRE_RL_start_row,
       WILL_FIRE_a,
       WILL_FIRE_b,
       WILL_FIRE_op_0__write,
       WILL_FIRE_op_10__write,
       WILL_FIRE_op_11__write,
       WILL_FIRE_op_12__write,
       WILL_FIRE_op_13__write,
       WILL_FIRE_op_14__write,
       WILL_FIRE_op_15__write,
       WILL_FIRE_op_1__write,
       WILL_FIRE_op_2__write,
       WILL_FIRE_op_3__write,
       WILL_FIRE_op_4__write,
       WILL_FIRE_op_5__write,
       WILL_FIRE_op_6__write,
       WILL_FIRE_op_7__write,
       WILL_FIRE_op_8__write,
       WILL_FIRE_op_9__write;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_vrg_c_0$write_1__VAL_1;
  wire [31 : 0] MUX_a_idx$write_1__VAL_1,
		MUX_a_idx$write_1__VAL_2,
		MUX_b_idx$write_1__VAL_2,
		MUX_mac_idx$write_1__VAL_2;
  wire [1 : 0] MUX_row_idx$write_1__VAL_1;
  wire MUX_got_a$write_1__SEL_1,
       MUX_got_b$write_1__SEL_1,
       MUX_mac_idx$write_1__SEL_1,
       MUX_rg_reset$write_1__SEL_1,
       MUX_row_idx$write_1__SEL_1,
       MUX_vrg_c_0$write_1__SEL_1,
       MUX_vrg_c_1$write_1__SEL_1,
       MUX_vrg_c_10$write_1__SEL_1,
       MUX_vrg_c_11$write_1__SEL_1,
       MUX_vrg_c_12$write_1__SEL_1,
       MUX_vrg_c_13$write_1__SEL_1,
       MUX_vrg_c_14$write_1__SEL_1,
       MUX_vrg_c_15$write_1__SEL_1,
       MUX_vrg_c_2$write_1__SEL_1,
       MUX_vrg_c_3$write_1__SEL_1,
       MUX_vrg_c_4$write_1__SEL_1,
       MUX_vrg_c_5$write_1__SEL_1,
       MUX_vrg_c_6$write_1__SEL_1,
       MUX_vrg_c_7$write_1__SEL_1,
       MUX_vrg_c_8$write_1__SEL_1,
       MUX_vrg_c_9$write_1__SEL_1,
       MUX_vrg_op_0$write_1__SEL_1,
       MUX_vrg_op_1$write_1__SEL_1,
       MUX_vrg_op_10$write_1__SEL_1,
       MUX_vrg_op_11$write_1__SEL_1,
       MUX_vrg_op_12$write_1__SEL_1,
       MUX_vrg_op_13$write_1__SEL_1,
       MUX_vrg_op_14$write_1__SEL_1,
       MUX_vrg_op_15$write_1__SEL_1,
       MUX_vrg_op_2$write_1__SEL_1,
       MUX_vrg_op_3$write_1__SEL_1,
       MUX_vrg_op_4$write_1__SEL_1,
       MUX_vrg_op_5$write_1__SEL_1,
       MUX_vrg_op_6$write_1__SEL_1,
       MUX_vrg_op_7$write_1__SEL_1,
       MUX_vrg_op_8$write_1__SEL_1,
       MUX_vrg_op_9$write_1__SEL_1;

  // remaining internal signals
  reg CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244;
  wire [31 : 0] x__h14178;
  wire [4 : 0] count_a_REM_5___d33, x__h7806, x__h7833;
  wire [3 : 0] x__h8774, x__h9152;
  wire count_a_ULT_16___d3, count_b_9_ULT_11___d40, mac_idx_25_SLT_9___d126;

  // action method a
  assign RDY_a = !got_a ;
  assign CAN_FIRE_a = !got_a ;
  assign WILL_FIRE_a = EN_a ;

  // action method b
  assign RDY_b = !got_b ;
  assign CAN_FIRE_b = !got_b ;
  assign WILL_FIRE_b = EN_b ;

  // action method op_0__write
  assign RDY_op_0__write = opReady ;
  assign CAN_FIRE_op_0__write = opReady ;
  assign WILL_FIRE_op_0__write = EN_op_0__write ;

  // value method op_0__read
  assign op_0__read = vrg_op_0 ;
  assign RDY_op_0__read = opReady ;

  // action method op_1__write
  assign RDY_op_1__write = opReady ;
  assign CAN_FIRE_op_1__write = opReady ;
  assign WILL_FIRE_op_1__write = EN_op_1__write ;

  // value method op_1__read
  assign op_1__read = vrg_op_1 ;
  assign RDY_op_1__read = opReady ;

  // action method op_2__write
  assign RDY_op_2__write = opReady ;
  assign CAN_FIRE_op_2__write = opReady ;
  assign WILL_FIRE_op_2__write = EN_op_2__write ;

  // value method op_2__read
  assign op_2__read = vrg_op_2 ;
  assign RDY_op_2__read = opReady ;

  // action method op_3__write
  assign RDY_op_3__write = opReady ;
  assign CAN_FIRE_op_3__write = opReady ;
  assign WILL_FIRE_op_3__write = EN_op_3__write ;

  // value method op_3__read
  assign op_3__read = vrg_op_3 ;
  assign RDY_op_3__read = opReady ;

  // action method op_4__write
  assign RDY_op_4__write = opReady ;
  assign CAN_FIRE_op_4__write = opReady ;
  assign WILL_FIRE_op_4__write = EN_op_4__write ;

  // value method op_4__read
  assign op_4__read = vrg_op_4 ;
  assign RDY_op_4__read = opReady ;

  // action method op_5__write
  assign RDY_op_5__write = opReady ;
  assign CAN_FIRE_op_5__write = opReady ;
  assign WILL_FIRE_op_5__write = EN_op_5__write ;

  // value method op_5__read
  assign op_5__read = vrg_op_5 ;
  assign RDY_op_5__read = opReady ;

  // action method op_6__write
  assign RDY_op_6__write = opReady ;
  assign CAN_FIRE_op_6__write = opReady ;
  assign WILL_FIRE_op_6__write = EN_op_6__write ;

  // value method op_6__read
  assign op_6__read = vrg_op_6 ;
  assign RDY_op_6__read = opReady ;

  // action method op_7__write
  assign RDY_op_7__write = opReady ;
  assign CAN_FIRE_op_7__write = opReady ;
  assign WILL_FIRE_op_7__write = EN_op_7__write ;

  // value method op_7__read
  assign op_7__read = vrg_op_7 ;
  assign RDY_op_7__read = opReady ;

  // action method op_8__write
  assign RDY_op_8__write = opReady ;
  assign CAN_FIRE_op_8__write = opReady ;
  assign WILL_FIRE_op_8__write = EN_op_8__write ;

  // value method op_8__read
  assign op_8__read = vrg_op_8 ;
  assign RDY_op_8__read = opReady ;

  // action method op_9__write
  assign RDY_op_9__write = opReady ;
  assign CAN_FIRE_op_9__write = opReady ;
  assign WILL_FIRE_op_9__write = EN_op_9__write ;

  // value method op_9__read
  assign op_9__read = vrg_op_9 ;
  assign RDY_op_9__read = opReady ;

  // action method op_10__write
  assign RDY_op_10__write = opReady ;
  assign CAN_FIRE_op_10__write = opReady ;
  assign WILL_FIRE_op_10__write = EN_op_10__write ;

  // value method op_10__read
  assign op_10__read = vrg_op_10 ;
  assign RDY_op_10__read = opReady ;

  // action method op_11__write
  assign RDY_op_11__write = opReady ;
  assign CAN_FIRE_op_11__write = opReady ;
  assign WILL_FIRE_op_11__write = EN_op_11__write ;

  // value method op_11__read
  assign op_11__read = vrg_op_11 ;
  assign RDY_op_11__read = opReady ;

  // action method op_12__write
  assign RDY_op_12__write = opReady ;
  assign CAN_FIRE_op_12__write = opReady ;
  assign WILL_FIRE_op_12__write = EN_op_12__write ;

  // value method op_12__read
  assign op_12__read = vrg_op_12 ;
  assign RDY_op_12__read = opReady ;

  // action method op_13__write
  assign RDY_op_13__write = opReady ;
  assign CAN_FIRE_op_13__write = opReady ;
  assign WILL_FIRE_op_13__write = EN_op_13__write ;

  // value method op_13__read
  assign op_13__read = vrg_op_13 ;
  assign RDY_op_13__read = opReady ;

  // action method op_14__write
  assign RDY_op_14__write = opReady ;
  assign CAN_FIRE_op_14__write = opReady ;
  assign WILL_FIRE_op_14__write = EN_op_14__write ;

  // value method op_14__read
  assign op_14__read = vrg_op_14 ;
  assign RDY_op_14__read = opReady ;

  // action method op_15__write
  assign RDY_op_15__write = opReady ;
  assign CAN_FIRE_op_15__write = opReady ;
  assign WILL_FIRE_op_15__write = EN_op_15__write ;

  // value method op_15__read
  assign op_15__read = vrg_op_15 ;
  assign RDY_op_15__read = opReady ;

  // submodule sys_array_0
  mkMac sys_array_0(.CLK(CLK),
		    .RST_N(RST_N),
		    .a_x(sys_array_0$a_x),
		    .b_x(sys_array_0$b_x),
		    .c_x(sys_array_0$c_x),
		    .EN_a(sys_array_0$EN_a),
		    .EN_b(sys_array_0$EN_b),
		    .EN_c(sys_array_0$EN_c),
		    .EN_mac_op(sys_array_0$EN_mac_op),
		    .RDY_a(),
		    .RDY_b(),
		    .RDY_c(),
		    .mac_op(sys_array_0$mac_op),
		    .RDY_mac_op(sys_array_0$RDY_mac_op));

  // submodule sys_array_1
  mkMac sys_array_1(.CLK(CLK),
		    .RST_N(RST_N),
		    .a_x(sys_array_1$a_x),
		    .b_x(sys_array_1$b_x),
		    .c_x(sys_array_1$c_x),
		    .EN_a(sys_array_1$EN_a),
		    .EN_b(sys_array_1$EN_b),
		    .EN_c(sys_array_1$EN_c),
		    .EN_mac_op(sys_array_1$EN_mac_op),
		    .RDY_a(),
		    .RDY_b(),
		    .RDY_c(),
		    .mac_op(sys_array_1$mac_op),
		    .RDY_mac_op(sys_array_1$RDY_mac_op));

  // submodule sys_array_10
  mkMac sys_array_10(.CLK(CLK),
		     .RST_N(RST_N),
		     .a_x(sys_array_10$a_x),
		     .b_x(sys_array_10$b_x),
		     .c_x(sys_array_10$c_x),
		     .EN_a(sys_array_10$EN_a),
		     .EN_b(sys_array_10$EN_b),
		     .EN_c(sys_array_10$EN_c),
		     .EN_mac_op(sys_array_10$EN_mac_op),
		     .RDY_a(),
		     .RDY_b(),
		     .RDY_c(),
		     .mac_op(sys_array_10$mac_op),
		     .RDY_mac_op(sys_array_10$RDY_mac_op));

  // submodule sys_array_11
  mkMac sys_array_11(.CLK(CLK),
		     .RST_N(RST_N),
		     .a_x(sys_array_11$a_x),
		     .b_x(sys_array_11$b_x),
		     .c_x(sys_array_11$c_x),
		     .EN_a(sys_array_11$EN_a),
		     .EN_b(sys_array_11$EN_b),
		     .EN_c(sys_array_11$EN_c),
		     .EN_mac_op(sys_array_11$EN_mac_op),
		     .RDY_a(),
		     .RDY_b(),
		     .RDY_c(),
		     .mac_op(sys_array_11$mac_op),
		     .RDY_mac_op(sys_array_11$RDY_mac_op));

  // submodule sys_array_12
  mkMac sys_array_12(.CLK(CLK),
		     .RST_N(RST_N),
		     .a_x(sys_array_12$a_x),
		     .b_x(sys_array_12$b_x),
		     .c_x(sys_array_12$c_x),
		     .EN_a(sys_array_12$EN_a),
		     .EN_b(sys_array_12$EN_b),
		     .EN_c(sys_array_12$EN_c),
		     .EN_mac_op(sys_array_12$EN_mac_op),
		     .RDY_a(),
		     .RDY_b(),
		     .RDY_c(),
		     .mac_op(sys_array_12$mac_op),
		     .RDY_mac_op(sys_array_12$RDY_mac_op));

  // submodule sys_array_13
  mkMac sys_array_13(.CLK(CLK),
		     .RST_N(RST_N),
		     .a_x(sys_array_13$a_x),
		     .b_x(sys_array_13$b_x),
		     .c_x(sys_array_13$c_x),
		     .EN_a(sys_array_13$EN_a),
		     .EN_b(sys_array_13$EN_b),
		     .EN_c(sys_array_13$EN_c),
		     .EN_mac_op(sys_array_13$EN_mac_op),
		     .RDY_a(),
		     .RDY_b(),
		     .RDY_c(),
		     .mac_op(sys_array_13$mac_op),
		     .RDY_mac_op(sys_array_13$RDY_mac_op));

  // submodule sys_array_14
  mkMac sys_array_14(.CLK(CLK),
		     .RST_N(RST_N),
		     .a_x(sys_array_14$a_x),
		     .b_x(sys_array_14$b_x),
		     .c_x(sys_array_14$c_x),
		     .EN_a(sys_array_14$EN_a),
		     .EN_b(sys_array_14$EN_b),
		     .EN_c(sys_array_14$EN_c),
		     .EN_mac_op(sys_array_14$EN_mac_op),
		     .RDY_a(),
		     .RDY_b(),
		     .RDY_c(),
		     .mac_op(sys_array_14$mac_op),
		     .RDY_mac_op(sys_array_14$RDY_mac_op));

  // submodule sys_array_15
  mkMac sys_array_15(.CLK(CLK),
		     .RST_N(RST_N),
		     .a_x(sys_array_15$a_x),
		     .b_x(sys_array_15$b_x),
		     .c_x(sys_array_15$c_x),
		     .EN_a(sys_array_15$EN_a),
		     .EN_b(sys_array_15$EN_b),
		     .EN_c(sys_array_15$EN_c),
		     .EN_mac_op(sys_array_15$EN_mac_op),
		     .RDY_a(),
		     .RDY_b(),
		     .RDY_c(),
		     .mac_op(sys_array_15$mac_op),
		     .RDY_mac_op(sys_array_15$RDY_mac_op));

  // submodule sys_array_2
  mkMac sys_array_2(.CLK(CLK),
		    .RST_N(RST_N),
		    .a_x(sys_array_2$a_x),
		    .b_x(sys_array_2$b_x),
		    .c_x(sys_array_2$c_x),
		    .EN_a(sys_array_2$EN_a),
		    .EN_b(sys_array_2$EN_b),
		    .EN_c(sys_array_2$EN_c),
		    .EN_mac_op(sys_array_2$EN_mac_op),
		    .RDY_a(),
		    .RDY_b(),
		    .RDY_c(),
		    .mac_op(sys_array_2$mac_op),
		    .RDY_mac_op(sys_array_2$RDY_mac_op));

  // submodule sys_array_3
  mkMac sys_array_3(.CLK(CLK),
		    .RST_N(RST_N),
		    .a_x(sys_array_3$a_x),
		    .b_x(sys_array_3$b_x),
		    .c_x(sys_array_3$c_x),
		    .EN_a(sys_array_3$EN_a),
		    .EN_b(sys_array_3$EN_b),
		    .EN_c(sys_array_3$EN_c),
		    .EN_mac_op(sys_array_3$EN_mac_op),
		    .RDY_a(),
		    .RDY_b(),
		    .RDY_c(),
		    .mac_op(sys_array_3$mac_op),
		    .RDY_mac_op(sys_array_3$RDY_mac_op));

  // submodule sys_array_4
  mkMac sys_array_4(.CLK(CLK),
		    .RST_N(RST_N),
		    .a_x(sys_array_4$a_x),
		    .b_x(sys_array_4$b_x),
		    .c_x(sys_array_4$c_x),
		    .EN_a(sys_array_4$EN_a),
		    .EN_b(sys_array_4$EN_b),
		    .EN_c(sys_array_4$EN_c),
		    .EN_mac_op(sys_array_4$EN_mac_op),
		    .RDY_a(),
		    .RDY_b(),
		    .RDY_c(),
		    .mac_op(sys_array_4$mac_op),
		    .RDY_mac_op(sys_array_4$RDY_mac_op));

  // submodule sys_array_5
  mkMac sys_array_5(.CLK(CLK),
		    .RST_N(RST_N),
		    .a_x(sys_array_5$a_x),
		    .b_x(sys_array_5$b_x),
		    .c_x(sys_array_5$c_x),
		    .EN_a(sys_array_5$EN_a),
		    .EN_b(sys_array_5$EN_b),
		    .EN_c(sys_array_5$EN_c),
		    .EN_mac_op(sys_array_5$EN_mac_op),
		    .RDY_a(),
		    .RDY_b(),
		    .RDY_c(),
		    .mac_op(sys_array_5$mac_op),
		    .RDY_mac_op(sys_array_5$RDY_mac_op));

  // submodule sys_array_6
  mkMac sys_array_6(.CLK(CLK),
		    .RST_N(RST_N),
		    .a_x(sys_array_6$a_x),
		    .b_x(sys_array_6$b_x),
		    .c_x(sys_array_6$c_x),
		    .EN_a(sys_array_6$EN_a),
		    .EN_b(sys_array_6$EN_b),
		    .EN_c(sys_array_6$EN_c),
		    .EN_mac_op(sys_array_6$EN_mac_op),
		    .RDY_a(),
		    .RDY_b(),
		    .RDY_c(),
		    .mac_op(sys_array_6$mac_op),
		    .RDY_mac_op(sys_array_6$RDY_mac_op));

  // submodule sys_array_7
  mkMac sys_array_7(.CLK(CLK),
		    .RST_N(RST_N),
		    .a_x(sys_array_7$a_x),
		    .b_x(sys_array_7$b_x),
		    .c_x(sys_array_7$c_x),
		    .EN_a(sys_array_7$EN_a),
		    .EN_b(sys_array_7$EN_b),
		    .EN_c(sys_array_7$EN_c),
		    .EN_mac_op(sys_array_7$EN_mac_op),
		    .RDY_a(),
		    .RDY_b(),
		    .RDY_c(),
		    .mac_op(sys_array_7$mac_op),
		    .RDY_mac_op(sys_array_7$RDY_mac_op));

  // submodule sys_array_8
  mkMac sys_array_8(.CLK(CLK),
		    .RST_N(RST_N),
		    .a_x(sys_array_8$a_x),
		    .b_x(sys_array_8$b_x),
		    .c_x(sys_array_8$c_x),
		    .EN_a(sys_array_8$EN_a),
		    .EN_b(sys_array_8$EN_b),
		    .EN_c(sys_array_8$EN_c),
		    .EN_mac_op(sys_array_8$EN_mac_op),
		    .RDY_a(),
		    .RDY_b(),
		    .RDY_c(),
		    .mac_op(sys_array_8$mac_op),
		    .RDY_mac_op(sys_array_8$RDY_mac_op));

  // submodule sys_array_9
  mkMac sys_array_9(.CLK(CLK),
		    .RST_N(RST_N),
		    .a_x(sys_array_9$a_x),
		    .b_x(sys_array_9$b_x),
		    .c_x(sys_array_9$c_x),
		    .EN_a(sys_array_9$EN_a),
		    .EN_b(sys_array_9$EN_b),
		    .EN_c(sys_array_9$EN_c),
		    .EN_mac_op(sys_array_9$EN_mac_op),
		    .RDY_a(),
		    .RDY_b(),
		    .RDY_c(),
		    .mac_op(sys_array_9$mac_op),
		    .RDY_mac_op(sys_array_9$RDY_mac_op));

  // rule RL_got_ips
  assign CAN_FIRE_RL_got_ips =
	     !count_a_ULT_16___d3 && !count_b_9_ULT_11___d40 && !ipReady &&
	     !opReady ;
  assign WILL_FIRE_RL_got_ips = CAN_FIRE_RL_got_ips ;

  // rule RL_put_ips
  assign CAN_FIRE_RL_put_ips =
	     ipReady && row_idx != 2'd3 && !get_pop && got_op && rg_reset &&
	     !opReady ;
  assign WILL_FIRE_RL_put_ips = CAN_FIRE_RL_put_ips ;

  // rule RL_ip_a
  assign CAN_FIRE_RL_ip_a = MUX_got_a$write_1__SEL_1 ;
  assign WILL_FIRE_RL_ip_a = MUX_got_a$write_1__SEL_1 ;

  // rule RL_ip_b
  assign CAN_FIRE_RL_ip_b = MUX_got_b$write_1__SEL_1 ;
  assign WILL_FIRE_RL_ip_b = MUX_got_b$write_1__SEL_1 ;

  // rule RL_start_row
  assign CAN_FIRE_RL_start_row = ipReady && !rg_reset && !opReady ;
  assign WILL_FIRE_RL_start_row = CAN_FIRE_RL_start_row ;

  // rule RL_put_op
  assign CAN_FIRE_RL_put_op =
	     CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 &&
	     ipReady &&
	     row_idx != 2'd3 &&
	     get_pop &&
	     !got_op &&
	     rg_reset &&
	     !opReady ;
  assign WILL_FIRE_RL_put_op = CAN_FIRE_RL_put_op ;

  // inputs to muxes for submodule ports
  assign MUX_got_a$write_1__SEL_1 = got_a && count_a_ULT_16___d3 && !opReady ;
  assign MUX_got_b$write_1__SEL_1 =
	     got_b && count_b_9_ULT_11___d40 && !opReady ;
  assign MUX_mac_idx$write_1__SEL_1 =
	     WILL_FIRE_RL_start_row && !mac_idx_25_SLT_9___d126 ;
  assign MUX_rg_reset$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && row_idx == 2'd2 ;
  assign MUX_row_idx$write_1__SEL_1 = WILL_FIRE_RL_put_op && row_idx != 2'd2 ;
  assign MUX_vrg_c_0$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd0 ;
  assign MUX_vrg_c_1$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd1 ;
  assign MUX_vrg_c_10$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd10 ;
  assign MUX_vrg_c_11$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd11 ;
  assign MUX_vrg_c_12$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd12 ;
  assign MUX_vrg_c_13$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd13 ;
  assign MUX_vrg_c_14$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd14 ;
  assign MUX_vrg_c_15$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd15 ;
  assign MUX_vrg_c_2$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd2 ;
  assign MUX_vrg_c_3$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd3 ;
  assign MUX_vrg_c_4$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd4 ;
  assign MUX_vrg_c_5$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd5 ;
  assign MUX_vrg_c_6$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd6 ;
  assign MUX_vrg_c_7$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd7 ;
  assign MUX_vrg_c_8$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd8 ;
  assign MUX_vrg_c_9$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd9 ;
  assign MUX_vrg_op_0$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd0 && row_idx == 2'd2 ;
  assign MUX_vrg_op_1$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd1 && row_idx == 2'd2 ;
  assign MUX_vrg_op_10$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd10 && row_idx == 2'd2 ;
  assign MUX_vrg_op_11$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd11 && row_idx == 2'd2 ;
  assign MUX_vrg_op_12$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd12 && row_idx == 2'd2 ;
  assign MUX_vrg_op_13$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd13 && row_idx == 2'd2 ;
  assign MUX_vrg_op_14$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd14 && row_idx == 2'd2 ;
  assign MUX_vrg_op_15$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd15 && row_idx == 2'd2 ;
  assign MUX_vrg_op_2$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd2 && row_idx == 2'd2 ;
  assign MUX_vrg_op_3$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd3 && row_idx == 2'd2 ;
  assign MUX_vrg_op_4$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd4 && row_idx == 2'd2 ;
  assign MUX_vrg_op_5$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd5 && row_idx == 2'd2 ;
  assign MUX_vrg_op_6$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd6 && row_idx == 2'd2 ;
  assign MUX_vrg_op_7$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd7 && row_idx == 2'd2 ;
  assign MUX_vrg_op_8$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd8 && row_idx == 2'd2 ;
  assign MUX_vrg_op_9$write_1__SEL_1 =
	     WILL_FIRE_RL_put_op && op_idx == 32'd9 && row_idx == 2'd2 ;
  assign MUX_a_idx$write_1__VAL_1 =
	     mac_idx_25_SLT_9___d126 ? a_init_idx + 32'd1 : 32'd3 ;
  assign MUX_a_idx$write_1__VAL_2 = a_idx + 32'd5 ;
  assign MUX_b_idx$write_1__VAL_2 =
	     mac_idx_25_SLT_9___d126 ? b_init_idx : b_init_idx + 32'd4 ;
  assign MUX_mac_idx$write_1__VAL_2 = mac_idx + 32'd1 ;
  assign MUX_row_idx$write_1__VAL_1 = row_idx + 2'd1 ;
  always@(mac_idx or
	  sys_array_0$mac_op or
	  sys_array_1$mac_op or
	  sys_array_2$mac_op or
	  sys_array_3$mac_op or
	  sys_array_4$mac_op or
	  sys_array_5$mac_op or
	  sys_array_6$mac_op or
	  sys_array_7$mac_op or
	  sys_array_8$mac_op or
	  sys_array_9$mac_op or
	  sys_array_10$mac_op or
	  sys_array_11$mac_op or
	  sys_array_12$mac_op or
	  sys_array_13$mac_op or sys_array_14$mac_op or sys_array_15$mac_op)
  begin
    case (mac_idx)
      32'd0: MUX_vrg_c_0$write_1__VAL_1 = sys_array_0$mac_op;
      32'd1: MUX_vrg_c_0$write_1__VAL_1 = sys_array_1$mac_op;
      32'd2: MUX_vrg_c_0$write_1__VAL_1 = sys_array_2$mac_op;
      32'd3: MUX_vrg_c_0$write_1__VAL_1 = sys_array_3$mac_op;
      32'd4: MUX_vrg_c_0$write_1__VAL_1 = sys_array_4$mac_op;
      32'd5: MUX_vrg_c_0$write_1__VAL_1 = sys_array_5$mac_op;
      32'd6: MUX_vrg_c_0$write_1__VAL_1 = sys_array_6$mac_op;
      32'd7: MUX_vrg_c_0$write_1__VAL_1 = sys_array_7$mac_op;
      32'd8: MUX_vrg_c_0$write_1__VAL_1 = sys_array_8$mac_op;
      32'd9: MUX_vrg_c_0$write_1__VAL_1 = sys_array_9$mac_op;
      32'd10: MUX_vrg_c_0$write_1__VAL_1 = sys_array_10$mac_op;
      32'd11: MUX_vrg_c_0$write_1__VAL_1 = sys_array_11$mac_op;
      32'd12: MUX_vrg_c_0$write_1__VAL_1 = sys_array_12$mac_op;
      32'd13: MUX_vrg_c_0$write_1__VAL_1 = sys_array_13$mac_op;
      32'd14: MUX_vrg_c_0$write_1__VAL_1 = sys_array_14$mac_op;
      32'd15: MUX_vrg_c_0$write_1__VAL_1 = sys_array_15$mac_op;
      default: MUX_vrg_c_0$write_1__VAL_1 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register a_idx
  assign a_idx$D_IN =
	     WILL_FIRE_RL_start_row ?
	       MUX_a_idx$write_1__VAL_1 :
	       MUX_a_idx$write_1__VAL_2 ;
  assign a_idx$EN = WILL_FIRE_RL_start_row || WILL_FIRE_RL_put_ips ;

  // register a_init_idx
  assign a_init_idx$D_IN = MUX_a_idx$write_1__VAL_1 ;
  assign a_init_idx$EN = CAN_FIRE_RL_start_row ;

  // register b_idx
  assign b_idx$D_IN =
	     WILL_FIRE_RL_put_op ? x__h14178 : MUX_b_idx$write_1__VAL_2 ;
  assign b_idx$EN = WILL_FIRE_RL_put_op || WILL_FIRE_RL_start_row ;

  // register b_init_idx
  assign b_init_idx$D_IN = b_init_idx + 32'd4 ;
  assign b_init_idx$EN = MUX_mac_idx$write_1__SEL_1 ;

  // register count_a
  assign count_a$D_IN = (count_a_REM_5___d33 == 5'd0) ? x__h7806 : x__h7833 ;
  assign count_a$EN = MUX_got_a$write_1__SEL_1 ;

  // register count_b
  assign count_b$D_IN = (x__h9152[1:0] == 2'd0) ? x__h8774 : x__h9152 ;
  assign count_b$EN = MUX_got_b$write_1__SEL_1 ;

  // register get_pop
  assign get_pop$D_IN = !WILL_FIRE_RL_put_op ;
  assign get_pop$EN = WILL_FIRE_RL_put_op || WILL_FIRE_RL_put_ips ;

  // register got_a
  assign got_a$D_IN = !WILL_FIRE_RL_ip_a ;
  assign got_a$EN = WILL_FIRE_RL_ip_a || EN_a ;

  // register got_b
  assign got_b$D_IN = !WILL_FIRE_RL_ip_b ;
  assign got_b$EN = WILL_FIRE_RL_ip_b || EN_b ;

  // register got_op
  assign got_op$D_IN = !WILL_FIRE_RL_put_ips ;
  assign got_op$EN = WILL_FIRE_RL_put_ips || WILL_FIRE_RL_put_op ;

  // register ipReady
  assign ipReady$D_IN = 1'd1 ;
  assign ipReady$EN = CAN_FIRE_RL_got_ips ;

  // register mac_idx
  assign mac_idx$D_IN =
	     MUX_mac_idx$write_1__SEL_1 ? 32'd0 : MUX_mac_idx$write_1__VAL_2 ;
  assign mac_idx$EN =
	     WILL_FIRE_RL_start_row && !mac_idx_25_SLT_9___d126 ||
	     WILL_FIRE_RL_put_op ;

  // register opReady
  assign opReady$D_IN = 1'd1 ;
  assign opReady$EN = WILL_FIRE_RL_start_row && op_idx == 32'd9 ;

  // register op_idx
  assign op_idx$D_IN = op_idx + 32'd1 ;
  assign op_idx$EN = MUX_rg_reset$write_1__SEL_1 ;

  // register rg_a
  assign rg_a$D_IN = a_x ;
  assign rg_a$EN = EN_a ;

  // register rg_b
  assign rg_b$D_IN = b_x ;
  assign rg_b$EN = EN_b ;

  // register rg_reset
  assign rg_reset$D_IN = !MUX_rg_reset$write_1__SEL_1 ;
  assign rg_reset$EN =
	     WILL_FIRE_RL_put_op && row_idx == 2'd2 ||
	     WILL_FIRE_RL_start_row ;

  // register row_idx
  assign row_idx$D_IN =
	     MUX_row_idx$write_1__SEL_1 ? MUX_row_idx$write_1__VAL_1 : 2'd0 ;
  assign row_idx$EN =
	     WILL_FIRE_RL_put_op && row_idx != 2'd2 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_a_0
  assign vrg_a_0$D_IN = rg_a ;
  assign vrg_a_0$EN = WILL_FIRE_RL_ip_a && count_a == 5'd0 ;

  // register vrg_a_1
  assign vrg_a_1$D_IN = rg_a ;
  assign vrg_a_1$EN = WILL_FIRE_RL_ip_a && count_a == 5'd1 ;

  // register vrg_a_10
  assign vrg_a_10$D_IN = rg_a ;
  assign vrg_a_10$EN = WILL_FIRE_RL_ip_a && count_a == 5'd10 ;

  // register vrg_a_11
  assign vrg_a_11$D_IN = rg_a ;
  assign vrg_a_11$EN = WILL_FIRE_RL_ip_a && count_a == 5'd11 ;

  // register vrg_a_12
  assign vrg_a_12$D_IN = rg_a ;
  assign vrg_a_12$EN = WILL_FIRE_RL_ip_a && count_a == 5'd12 ;

  // register vrg_a_13
  assign vrg_a_13$D_IN = rg_a ;
  assign vrg_a_13$EN = WILL_FIRE_RL_ip_a && count_a == 5'd13 ;

  // register vrg_a_14
  assign vrg_a_14$D_IN = rg_a ;
  assign vrg_a_14$EN = WILL_FIRE_RL_ip_a && count_a == 5'd14 ;

  // register vrg_a_15
  assign vrg_a_15$D_IN = rg_a ;
  assign vrg_a_15$EN = WILL_FIRE_RL_ip_a && count_a == 5'd15 ;

  // register vrg_a_16
  assign vrg_a_16$D_IN = rg_a ;
  assign vrg_a_16$EN = WILL_FIRE_RL_ip_a && count_a == 5'd16 ;

  // register vrg_a_17
  assign vrg_a_17$D_IN = rg_a ;
  assign vrg_a_17$EN = WILL_FIRE_RL_ip_a && count_a == 5'd17 ;

  // register vrg_a_18
  assign vrg_a_18$D_IN = rg_a ;
  assign vrg_a_18$EN = WILL_FIRE_RL_ip_a && count_a == 5'd18 ;

  // register vrg_a_19
  assign vrg_a_19$D_IN = rg_a ;
  assign vrg_a_19$EN = WILL_FIRE_RL_ip_a && count_a == 5'd19 ;

  // register vrg_a_2
  assign vrg_a_2$D_IN = rg_a ;
  assign vrg_a_2$EN = WILL_FIRE_RL_ip_a && count_a == 5'd2 ;

  // register vrg_a_20
  assign vrg_a_20$D_IN = rg_a ;
  assign vrg_a_20$EN = WILL_FIRE_RL_ip_a && count_a == 5'd20 ;

  // register vrg_a_21
  assign vrg_a_21$D_IN = rg_a ;
  assign vrg_a_21$EN = WILL_FIRE_RL_ip_a && count_a == 5'd21 ;

  // register vrg_a_22
  assign vrg_a_22$D_IN = rg_a ;
  assign vrg_a_22$EN = WILL_FIRE_RL_ip_a && count_a == 5'd22 ;

  // register vrg_a_23
  assign vrg_a_23$D_IN = rg_a ;
  assign vrg_a_23$EN = WILL_FIRE_RL_ip_a && count_a == 5'd23 ;

  // register vrg_a_3
  assign vrg_a_3$D_IN = rg_a ;
  assign vrg_a_3$EN = WILL_FIRE_RL_ip_a && count_a == 5'd3 ;

  // register vrg_a_4
  assign vrg_a_4$D_IN = rg_a ;
  assign vrg_a_4$EN = WILL_FIRE_RL_ip_a && count_a == 5'd4 ;

  // register vrg_a_5
  assign vrg_a_5$D_IN = rg_a ;
  assign vrg_a_5$EN = WILL_FIRE_RL_ip_a && count_a == 5'd5 ;

  // register vrg_a_6
  assign vrg_a_6$D_IN = rg_a ;
  assign vrg_a_6$EN = WILL_FIRE_RL_ip_a && count_a == 5'd6 ;

  // register vrg_a_7
  assign vrg_a_7$D_IN = rg_a ;
  assign vrg_a_7$EN = WILL_FIRE_RL_ip_a && count_a == 5'd7 ;

  // register vrg_a_8
  assign vrg_a_8$D_IN = rg_a ;
  assign vrg_a_8$EN = WILL_FIRE_RL_ip_a && count_a == 5'd8 ;

  // register vrg_a_9
  assign vrg_a_9$D_IN = rg_a ;
  assign vrg_a_9$EN = WILL_FIRE_RL_ip_a && count_a == 5'd9 ;

  // register vrg_b_0
  assign vrg_b_0$D_IN = rg_b ;
  assign vrg_b_0$EN =
	     WILL_FIRE_RL_ip_b &&
	     (x__h9152 == 4'd0 || count_b == 4'd0 && x__h9152[1:0] != 2'd0) ;

  // register vrg_b_1
  assign vrg_b_1$D_IN = rg_b ;
  assign vrg_b_1$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd1 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_10
  assign vrg_b_10$D_IN = rg_b ;
  assign vrg_b_10$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd10 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_11
  assign vrg_b_11$D_IN = rg_b ;
  assign vrg_b_11$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd11 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_12
  assign vrg_b_12$D_IN = rg_b ;
  assign vrg_b_12$EN =
	     WILL_FIRE_RL_ip_b &&
	     (x__h9152 == 4'd12 ||
	      count_b == 4'd12 && x__h9152[1:0] != 2'd0) ;

  // register vrg_b_13
  assign vrg_b_13$D_IN = rg_b ;
  assign vrg_b_13$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd13 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_14
  assign vrg_b_14$D_IN = rg_b ;
  assign vrg_b_14$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd14 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_15
  assign vrg_b_15$D_IN = rg_b ;
  assign vrg_b_15$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd15 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_2
  assign vrg_b_2$D_IN = rg_b ;
  assign vrg_b_2$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd2 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_3
  assign vrg_b_3$D_IN = rg_b ;
  assign vrg_b_3$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd3 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_4
  assign vrg_b_4$D_IN = rg_b ;
  assign vrg_b_4$EN =
	     WILL_FIRE_RL_ip_b &&
	     (x__h9152 == 4'd4 || count_b == 4'd4 && x__h9152[1:0] != 2'd0) ;

  // register vrg_b_5
  assign vrg_b_5$D_IN = rg_b ;
  assign vrg_b_5$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd5 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_6
  assign vrg_b_6$D_IN = rg_b ;
  assign vrg_b_6$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd6 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_7
  assign vrg_b_7$D_IN = rg_b ;
  assign vrg_b_7$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd7 && x__h9152[1:0] != 2'd0 ;

  // register vrg_b_8
  assign vrg_b_8$D_IN = rg_b ;
  assign vrg_b_8$EN =
	     WILL_FIRE_RL_ip_b &&
	     (x__h9152 == 4'd8 || count_b == 4'd8 && x__h9152[1:0] != 2'd0) ;

  // register vrg_b_9
  assign vrg_b_9$D_IN = rg_b ;
  assign vrg_b_9$EN =
	     WILL_FIRE_RL_ip_b && count_b == 4'd9 && x__h9152[1:0] != 2'd0 ;

  // register vrg_c_0
  assign vrg_c_0$D_IN =
	     MUX_vrg_c_0$write_1__SEL_1 ? MUX_vrg_c_0$write_1__VAL_1 : 32'd0 ;
  assign vrg_c_0$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd0 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_1
  assign vrg_c_1$D_IN =
	     MUX_vrg_c_1$write_1__SEL_1 ? MUX_vrg_c_0$write_1__VAL_1 : 32'd0 ;
  assign vrg_c_1$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd1 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_10
  assign vrg_c_10$D_IN =
	     MUX_vrg_c_10$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       32'd0 ;
  assign vrg_c_10$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd10 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_11
  assign vrg_c_11$D_IN =
	     MUX_vrg_c_11$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       32'd0 ;
  assign vrg_c_11$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd11 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_12
  assign vrg_c_12$D_IN =
	     MUX_vrg_c_12$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       32'd0 ;
  assign vrg_c_12$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd12 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_13
  assign vrg_c_13$D_IN =
	     MUX_vrg_c_13$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       32'd0 ;
  assign vrg_c_13$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd13 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_14
  assign vrg_c_14$D_IN =
	     MUX_vrg_c_14$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       32'd0 ;
  assign vrg_c_14$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd14 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_15
  assign vrg_c_15$D_IN =
	     MUX_vrg_c_15$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       32'd0 ;
  assign vrg_c_15$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd15 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_2
  assign vrg_c_2$D_IN =
	     MUX_vrg_c_2$write_1__SEL_1 ? MUX_vrg_c_0$write_1__VAL_1 : 32'd0 ;
  assign vrg_c_2$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd2 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_3
  assign vrg_c_3$D_IN =
	     MUX_vrg_c_3$write_1__SEL_1 ? MUX_vrg_c_0$write_1__VAL_1 : 32'd0 ;
  assign vrg_c_3$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd3 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_4
  assign vrg_c_4$D_IN =
	     MUX_vrg_c_4$write_1__SEL_1 ? MUX_vrg_c_0$write_1__VAL_1 : 32'd0 ;
  assign vrg_c_4$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd4 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_5
  assign vrg_c_5$D_IN =
	     MUX_vrg_c_5$write_1__SEL_1 ? MUX_vrg_c_0$write_1__VAL_1 : 32'd0 ;
  assign vrg_c_5$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd5 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_6
  assign vrg_c_6$D_IN =
	     MUX_vrg_c_6$write_1__SEL_1 ? MUX_vrg_c_0$write_1__VAL_1 : 32'd0 ;
  assign vrg_c_6$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd6 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_7
  assign vrg_c_7$D_IN =
	     MUX_vrg_c_7$write_1__SEL_1 ? MUX_vrg_c_0$write_1__VAL_1 : 32'd0 ;
  assign vrg_c_7$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd7 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_8
  assign vrg_c_8$D_IN =
	     MUX_vrg_c_8$write_1__SEL_1 ? MUX_vrg_c_0$write_1__VAL_1 : 32'd0 ;
  assign vrg_c_8$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd8 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_c_9
  assign vrg_c_9$D_IN =
	     MUX_vrg_c_9$write_1__SEL_1 ? MUX_vrg_c_0$write_1__VAL_1 : 32'd0 ;
  assign vrg_c_9$EN =
	     WILL_FIRE_RL_put_op && x__h14178 == 32'd9 ||
	     WILL_FIRE_RL_start_row ;

  // register vrg_op_0
  assign vrg_op_0$D_IN =
	     MUX_vrg_op_0$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_0__write_1 ;
  assign vrg_op_0$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd0 && row_idx == 2'd2 ||
	     EN_op_0__write ;

  // register vrg_op_1
  assign vrg_op_1$D_IN =
	     MUX_vrg_op_1$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_1__write_1 ;
  assign vrg_op_1$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd1 && row_idx == 2'd2 ||
	     EN_op_1__write ;

  // register vrg_op_10
  assign vrg_op_10$D_IN =
	     MUX_vrg_op_10$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_10__write_1 ;
  assign vrg_op_10$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd10 && row_idx == 2'd2 ||
	     EN_op_10__write ;

  // register vrg_op_11
  assign vrg_op_11$D_IN =
	     MUX_vrg_op_11$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_11__write_1 ;
  assign vrg_op_11$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd11 && row_idx == 2'd2 ||
	     EN_op_11__write ;

  // register vrg_op_12
  assign vrg_op_12$D_IN =
	     MUX_vrg_op_12$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_12__write_1 ;
  assign vrg_op_12$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd12 && row_idx == 2'd2 ||
	     EN_op_12__write ;

  // register vrg_op_13
  assign vrg_op_13$D_IN =
	     MUX_vrg_op_13$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_13__write_1 ;
  assign vrg_op_13$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd13 && row_idx == 2'd2 ||
	     EN_op_13__write ;

  // register vrg_op_14
  assign vrg_op_14$D_IN =
	     MUX_vrg_op_14$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_14__write_1 ;
  assign vrg_op_14$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd14 && row_idx == 2'd2 ||
	     EN_op_14__write ;

  // register vrg_op_15
  assign vrg_op_15$D_IN =
	     MUX_vrg_op_15$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_15__write_1 ;
  assign vrg_op_15$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd15 && row_idx == 2'd2 ||
	     EN_op_15__write ;

  // register vrg_op_2
  assign vrg_op_2$D_IN =
	     MUX_vrg_op_2$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_2__write_1 ;
  assign vrg_op_2$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd2 && row_idx == 2'd2 ||
	     EN_op_2__write ;

  // register vrg_op_3
  assign vrg_op_3$D_IN =
	     MUX_vrg_op_3$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_3__write_1 ;
  assign vrg_op_3$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd3 && row_idx == 2'd2 ||
	     EN_op_3__write ;

  // register vrg_op_4
  assign vrg_op_4$D_IN =
	     MUX_vrg_op_4$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_4__write_1 ;
  assign vrg_op_4$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd4 && row_idx == 2'd2 ||
	     EN_op_4__write ;

  // register vrg_op_5
  assign vrg_op_5$D_IN =
	     MUX_vrg_op_5$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_5__write_1 ;
  assign vrg_op_5$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd5 && row_idx == 2'd2 ||
	     EN_op_5__write ;

  // register vrg_op_6
  assign vrg_op_6$D_IN =
	     MUX_vrg_op_6$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_6__write_1 ;
  assign vrg_op_6$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd6 && row_idx == 2'd2 ||
	     EN_op_6__write ;

  // register vrg_op_7
  assign vrg_op_7$D_IN =
	     MUX_vrg_op_7$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_7__write_1 ;
  assign vrg_op_7$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd7 && row_idx == 2'd2 ||
	     EN_op_7__write ;

  // register vrg_op_8
  assign vrg_op_8$D_IN =
	     MUX_vrg_op_8$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_8__write_1 ;
  assign vrg_op_8$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd8 && row_idx == 2'd2 ||
	     EN_op_8__write ;

  // register vrg_op_9
  assign vrg_op_9$D_IN =
	     MUX_vrg_op_9$write_1__SEL_1 ?
	       MUX_vrg_c_0$write_1__VAL_1 :
	       op_9__write_1 ;
  assign vrg_op_9$EN =
	     WILL_FIRE_RL_put_op && op_idx == 32'd9 && row_idx == 2'd2 ||
	     EN_op_9__write ;

  // submodule sys_array_0
  always@(a_idx or
	  vrg_a_0 or
	  vrg_a_1 or
	  vrg_a_2 or
	  vrg_a_3 or
	  vrg_a_4 or
	  vrg_a_5 or
	  vrg_a_6 or
	  vrg_a_7 or
	  vrg_a_8 or
	  vrg_a_9 or
	  vrg_a_10 or
	  vrg_a_11 or
	  vrg_a_12 or
	  vrg_a_13 or
	  vrg_a_14 or
	  vrg_a_15 or
	  vrg_a_16 or
	  vrg_a_17 or
	  vrg_a_18 or
	  vrg_a_19 or vrg_a_20 or vrg_a_21 or vrg_a_22 or vrg_a_23)
  begin
    case (a_idx)
      32'd0: sys_array_0$a_x = vrg_a_0;
      32'd1: sys_array_0$a_x = vrg_a_1;
      32'd2: sys_array_0$a_x = vrg_a_2;
      32'd3: sys_array_0$a_x = vrg_a_3;
      32'd4: sys_array_0$a_x = vrg_a_4;
      32'd5: sys_array_0$a_x = vrg_a_5;
      32'd6: sys_array_0$a_x = vrg_a_6;
      32'd7: sys_array_0$a_x = vrg_a_7;
      32'd8: sys_array_0$a_x = vrg_a_8;
      32'd9: sys_array_0$a_x = vrg_a_9;
      32'd10: sys_array_0$a_x = vrg_a_10;
      32'd11: sys_array_0$a_x = vrg_a_11;
      32'd12: sys_array_0$a_x = vrg_a_12;
      32'd13: sys_array_0$a_x = vrg_a_13;
      32'd14: sys_array_0$a_x = vrg_a_14;
      32'd15: sys_array_0$a_x = vrg_a_15;
      32'd16: sys_array_0$a_x = vrg_a_16;
      32'd17: sys_array_0$a_x = vrg_a_17;
      32'd18: sys_array_0$a_x = vrg_a_18;
      32'd19: sys_array_0$a_x = vrg_a_19;
      32'd20: sys_array_0$a_x = vrg_a_20;
      32'd21: sys_array_0$a_x = vrg_a_21;
      32'd22: sys_array_0$a_x = vrg_a_22;
      32'd23: sys_array_0$a_x = vrg_a_23;
      default: sys_array_0$a_x =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(b_idx or
	  vrg_b_0 or
	  vrg_b_1 or
	  vrg_b_2 or
	  vrg_b_3 or
	  vrg_b_4 or
	  vrg_b_5 or
	  vrg_b_6 or
	  vrg_b_7 or
	  vrg_b_8 or
	  vrg_b_9 or
	  vrg_b_10 or
	  vrg_b_11 or vrg_b_12 or vrg_b_13 or vrg_b_14 or vrg_b_15)
  begin
    case (b_idx)
      32'd0: sys_array_0$b_x = vrg_b_0;
      32'd1: sys_array_0$b_x = vrg_b_1;
      32'd2: sys_array_0$b_x = vrg_b_2;
      32'd3: sys_array_0$b_x = vrg_b_3;
      32'd4: sys_array_0$b_x = vrg_b_4;
      32'd5: sys_array_0$b_x = vrg_b_5;
      32'd6: sys_array_0$b_x = vrg_b_6;
      32'd7: sys_array_0$b_x = vrg_b_7;
      32'd8: sys_array_0$b_x = vrg_b_8;
      32'd9: sys_array_0$b_x = vrg_b_9;
      32'd10: sys_array_0$b_x = vrg_b_10;
      32'd11: sys_array_0$b_x = vrg_b_11;
      32'd12: sys_array_0$b_x = vrg_b_12;
      32'd13: sys_array_0$b_x = vrg_b_13;
      32'd14: sys_array_0$b_x = vrg_b_14;
      32'd15: sys_array_0$b_x = vrg_b_15;
      default: sys_array_0$b_x =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(b_idx or
	  vrg_c_0 or
	  vrg_c_1 or
	  vrg_c_2 or
	  vrg_c_3 or
	  vrg_c_4 or
	  vrg_c_5 or
	  vrg_c_6 or
	  vrg_c_7 or
	  vrg_c_8 or
	  vrg_c_9 or
	  vrg_c_10 or
	  vrg_c_11 or vrg_c_12 or vrg_c_13 or vrg_c_14 or vrg_c_15)
  begin
    case (b_idx)
      32'd0: sys_array_0$c_x = vrg_c_0;
      32'd1: sys_array_0$c_x = vrg_c_1;
      32'd2: sys_array_0$c_x = vrg_c_2;
      32'd3: sys_array_0$c_x = vrg_c_3;
      32'd4: sys_array_0$c_x = vrg_c_4;
      32'd5: sys_array_0$c_x = vrg_c_5;
      32'd6: sys_array_0$c_x = vrg_c_6;
      32'd7: sys_array_0$c_x = vrg_c_7;
      32'd8: sys_array_0$c_x = vrg_c_8;
      32'd9: sys_array_0$c_x = vrg_c_9;
      32'd10: sys_array_0$c_x = vrg_c_10;
      32'd11: sys_array_0$c_x = vrg_c_11;
      32'd12: sys_array_0$c_x = vrg_c_12;
      32'd13: sys_array_0$c_x = vrg_c_13;
      32'd14: sys_array_0$c_x = vrg_c_14;
      32'd15: sys_array_0$c_x = vrg_c_15;
      default: sys_array_0$c_x = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign sys_array_0$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd0 ;
  assign sys_array_0$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd0 ;
  assign sys_array_0$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd0 ;
  assign sys_array_0$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd0 ;

  // submodule sys_array_1
  assign sys_array_1$a_x = sys_array_0$a_x ;
  assign sys_array_1$b_x = sys_array_0$b_x ;
  assign sys_array_1$c_x = sys_array_0$c_x ;
  assign sys_array_1$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd1 ;
  assign sys_array_1$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd1 ;
  assign sys_array_1$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd1 ;
  assign sys_array_1$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd1 ;

  // submodule sys_array_10
  assign sys_array_10$a_x = sys_array_0$a_x ;
  assign sys_array_10$b_x = sys_array_0$b_x ;
  assign sys_array_10$c_x = sys_array_0$c_x ;
  assign sys_array_10$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd10 ;
  assign sys_array_10$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd10 ;
  assign sys_array_10$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd10 ;
  assign sys_array_10$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd10 ;

  // submodule sys_array_11
  assign sys_array_11$a_x = sys_array_0$a_x ;
  assign sys_array_11$b_x = sys_array_0$b_x ;
  assign sys_array_11$c_x = sys_array_0$c_x ;
  assign sys_array_11$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd11 ;
  assign sys_array_11$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd11 ;
  assign sys_array_11$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd11 ;
  assign sys_array_11$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd11 ;

  // submodule sys_array_12
  assign sys_array_12$a_x = sys_array_0$a_x ;
  assign sys_array_12$b_x = sys_array_0$b_x ;
  assign sys_array_12$c_x = sys_array_0$c_x ;
  assign sys_array_12$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd12 ;
  assign sys_array_12$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd12 ;
  assign sys_array_12$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd12 ;
  assign sys_array_12$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd12 ;

  // submodule sys_array_13
  assign sys_array_13$a_x = sys_array_0$a_x ;
  assign sys_array_13$b_x = sys_array_0$b_x ;
  assign sys_array_13$c_x = sys_array_0$c_x ;
  assign sys_array_13$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd13 ;
  assign sys_array_13$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd13 ;
  assign sys_array_13$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd13 ;
  assign sys_array_13$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd13 ;

  // submodule sys_array_14
  assign sys_array_14$a_x = sys_array_0$a_x ;
  assign sys_array_14$b_x = sys_array_0$b_x ;
  assign sys_array_14$c_x = sys_array_0$c_x ;
  assign sys_array_14$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd14 ;
  assign sys_array_14$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd14 ;
  assign sys_array_14$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd14 ;
  assign sys_array_14$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd14 ;

  // submodule sys_array_15
  assign sys_array_15$a_x = sys_array_0$a_x ;
  assign sys_array_15$b_x = sys_array_0$b_x ;
  assign sys_array_15$c_x = sys_array_0$c_x ;
  assign sys_array_15$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd15 ;
  assign sys_array_15$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd15 ;
  assign sys_array_15$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd15 ;
  assign sys_array_15$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd15 ;

  // submodule sys_array_2
  assign sys_array_2$a_x = sys_array_0$a_x ;
  assign sys_array_2$b_x = sys_array_0$b_x ;
  assign sys_array_2$c_x = sys_array_0$c_x ;
  assign sys_array_2$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd2 ;
  assign sys_array_2$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd2 ;
  assign sys_array_2$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd2 ;
  assign sys_array_2$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd2 ;

  // submodule sys_array_3
  assign sys_array_3$a_x = sys_array_0$a_x ;
  assign sys_array_3$b_x = sys_array_0$b_x ;
  assign sys_array_3$c_x = sys_array_0$c_x ;
  assign sys_array_3$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd3 ;
  assign sys_array_3$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd3 ;
  assign sys_array_3$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd3 ;
  assign sys_array_3$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd3 ;

  // submodule sys_array_4
  assign sys_array_4$a_x = sys_array_0$a_x ;
  assign sys_array_4$b_x = sys_array_0$b_x ;
  assign sys_array_4$c_x = sys_array_0$c_x ;
  assign sys_array_4$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd4 ;
  assign sys_array_4$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd4 ;
  assign sys_array_4$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd4 ;
  assign sys_array_4$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd4 ;

  // submodule sys_array_5
  assign sys_array_5$a_x = sys_array_0$a_x ;
  assign sys_array_5$b_x = sys_array_0$b_x ;
  assign sys_array_5$c_x = sys_array_0$c_x ;
  assign sys_array_5$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd5 ;
  assign sys_array_5$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd5 ;
  assign sys_array_5$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd5 ;
  assign sys_array_5$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd5 ;

  // submodule sys_array_6
  assign sys_array_6$a_x = sys_array_0$a_x ;
  assign sys_array_6$b_x = sys_array_0$b_x ;
  assign sys_array_6$c_x = sys_array_0$c_x ;
  assign sys_array_6$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd6 ;
  assign sys_array_6$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd6 ;
  assign sys_array_6$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd6 ;
  assign sys_array_6$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd6 ;

  // submodule sys_array_7
  assign sys_array_7$a_x = sys_array_0$a_x ;
  assign sys_array_7$b_x = sys_array_0$b_x ;
  assign sys_array_7$c_x = sys_array_0$c_x ;
  assign sys_array_7$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd7 ;
  assign sys_array_7$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd7 ;
  assign sys_array_7$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd7 ;
  assign sys_array_7$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd7 ;

  // submodule sys_array_8
  assign sys_array_8$a_x = sys_array_0$a_x ;
  assign sys_array_8$b_x = sys_array_0$b_x ;
  assign sys_array_8$c_x = sys_array_0$c_x ;
  assign sys_array_8$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd8 ;
  assign sys_array_8$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd8 ;
  assign sys_array_8$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd8 ;
  assign sys_array_8$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd8 ;

  // submodule sys_array_9
  assign sys_array_9$a_x = sys_array_0$a_x ;
  assign sys_array_9$b_x = sys_array_0$b_x ;
  assign sys_array_9$c_x = sys_array_0$c_x ;
  assign sys_array_9$EN_a = WILL_FIRE_RL_put_ips && mac_idx == 32'd9 ;
  assign sys_array_9$EN_b = WILL_FIRE_RL_put_ips && mac_idx == 32'd9 ;
  assign sys_array_9$EN_c = WILL_FIRE_RL_put_ips && mac_idx == 32'd9 ;
  assign sys_array_9$EN_mac_op = WILL_FIRE_RL_put_op && mac_idx == 32'd9 ;

  // remaining internal signals
  assign count_a_REM_5___d33 = count_a % 5'd5 ;
  assign count_a_ULT_16___d3 = count_a < 5'd16 ;
  assign count_b_9_ULT_11___d40 = count_b < 4'd11 ;
  assign mac_idx_25_SLT_9___d126 = (mac_idx ^ 32'h80000000) < 32'h80000009 ;
  assign x__h14178 = b_idx + 32'd1 ;
  assign x__h7806 = count_a + 5'd3 ;
  assign x__h7833 = count_a + 5'd1 ;
  assign x__h8774 = count_b + 4'd2 ;
  assign x__h9152 = count_b + 4'd1 ;
  always@(mac_idx or
	  sys_array_0$RDY_mac_op or
	  sys_array_1$RDY_mac_op or
	  sys_array_2$RDY_mac_op or
	  sys_array_3$RDY_mac_op or
	  sys_array_4$RDY_mac_op or
	  sys_array_5$RDY_mac_op or
	  sys_array_6$RDY_mac_op or
	  sys_array_7$RDY_mac_op or
	  sys_array_8$RDY_mac_op or
	  sys_array_9$RDY_mac_op or
	  sys_array_10$RDY_mac_op or
	  sys_array_11$RDY_mac_op or
	  sys_array_12$RDY_mac_op or
	  sys_array_13$RDY_mac_op or
	  sys_array_14$RDY_mac_op or sys_array_15$RDY_mac_op)
  begin
    case (mac_idx)
      32'd0:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_0$RDY_mac_op;
      32'd1:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_1$RDY_mac_op;
      32'd2:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_2$RDY_mac_op;
      32'd3:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_3$RDY_mac_op;
      32'd4:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_4$RDY_mac_op;
      32'd5:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_5$RDY_mac_op;
      32'd6:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_6$RDY_mac_op;
      32'd7:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_7$RDY_mac_op;
      32'd8:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_8$RDY_mac_op;
      32'd9:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_9$RDY_mac_op;
      32'd10:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_10$RDY_mac_op;
      32'd11:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_11$RDY_mac_op;
      32'd12:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_12$RDY_mac_op;
      32'd13:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_13$RDY_mac_op;
      32'd14:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_14$RDY_mac_op;
      32'd15:
	  CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
	      sys_array_15$RDY_mac_op;
      default: CASE_mac_idx_25_0_sys_array_0_RDY_mac_op__28_1_ETC___d244 =
		   1'd1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a_idx <= `BSV_ASSIGNMENT_DELAY 32'd0;
	a_init_idx <= `BSV_ASSIGNMENT_DELAY 32'd2;
	b_idx <= `BSV_ASSIGNMENT_DELAY 32'd0;
	b_init_idx <= `BSV_ASSIGNMENT_DELAY 32'd0;
	count_a <= `BSV_ASSIGNMENT_DELAY 5'd3;
	count_b <= `BSV_ASSIGNMENT_DELAY 4'd0;
	get_pop <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_a <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_b <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_op <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ipReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_idx <= `BSV_ASSIGNMENT_DELAY 32'd0;
	opReady <= `BSV_ASSIGNMENT_DELAY 1'd0;
	op_idx <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	row_idx <= `BSV_ASSIGNMENT_DELAY 2'd0;
	vrg_a_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_10 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_11 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_12 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_13 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_14 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_15 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_16 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_17 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_18 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_19 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_20 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_21 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_22 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_23 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_a_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_10 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_11 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_12 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_13 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_14 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_15 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_8 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_b_9 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	vrg_c_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_c_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	vrg_op_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (a_idx$EN) a_idx <= `BSV_ASSIGNMENT_DELAY a_idx$D_IN;
	if (a_init_idx$EN)
	  a_init_idx <= `BSV_ASSIGNMENT_DELAY a_init_idx$D_IN;
	if (b_idx$EN) b_idx <= `BSV_ASSIGNMENT_DELAY b_idx$D_IN;
	if (b_init_idx$EN)
	  b_init_idx <= `BSV_ASSIGNMENT_DELAY b_init_idx$D_IN;
	if (count_a$EN) count_a <= `BSV_ASSIGNMENT_DELAY count_a$D_IN;
	if (count_b$EN) count_b <= `BSV_ASSIGNMENT_DELAY count_b$D_IN;
	if (get_pop$EN) get_pop <= `BSV_ASSIGNMENT_DELAY get_pop$D_IN;
	if (got_a$EN) got_a <= `BSV_ASSIGNMENT_DELAY got_a$D_IN;
	if (got_b$EN) got_b <= `BSV_ASSIGNMENT_DELAY got_b$D_IN;
	if (got_op$EN) got_op <= `BSV_ASSIGNMENT_DELAY got_op$D_IN;
	if (ipReady$EN) ipReady <= `BSV_ASSIGNMENT_DELAY ipReady$D_IN;
	if (mac_idx$EN) mac_idx <= `BSV_ASSIGNMENT_DELAY mac_idx$D_IN;
	if (opReady$EN) opReady <= `BSV_ASSIGNMENT_DELAY opReady$D_IN;
	if (op_idx$EN) op_idx <= `BSV_ASSIGNMENT_DELAY op_idx$D_IN;
	if (rg_a$EN) rg_a <= `BSV_ASSIGNMENT_DELAY rg_a$D_IN;
	if (rg_b$EN) rg_b <= `BSV_ASSIGNMENT_DELAY rg_b$D_IN;
	if (rg_reset$EN) rg_reset <= `BSV_ASSIGNMENT_DELAY rg_reset$D_IN;
	if (row_idx$EN) row_idx <= `BSV_ASSIGNMENT_DELAY row_idx$D_IN;
	if (vrg_a_0$EN) vrg_a_0 <= `BSV_ASSIGNMENT_DELAY vrg_a_0$D_IN;
	if (vrg_a_1$EN) vrg_a_1 <= `BSV_ASSIGNMENT_DELAY vrg_a_1$D_IN;
	if (vrg_a_10$EN) vrg_a_10 <= `BSV_ASSIGNMENT_DELAY vrg_a_10$D_IN;
	if (vrg_a_11$EN) vrg_a_11 <= `BSV_ASSIGNMENT_DELAY vrg_a_11$D_IN;
	if (vrg_a_12$EN) vrg_a_12 <= `BSV_ASSIGNMENT_DELAY vrg_a_12$D_IN;
	if (vrg_a_13$EN) vrg_a_13 <= `BSV_ASSIGNMENT_DELAY vrg_a_13$D_IN;
	if (vrg_a_14$EN) vrg_a_14 <= `BSV_ASSIGNMENT_DELAY vrg_a_14$D_IN;
	if (vrg_a_15$EN) vrg_a_15 <= `BSV_ASSIGNMENT_DELAY vrg_a_15$D_IN;
	if (vrg_a_16$EN) vrg_a_16 <= `BSV_ASSIGNMENT_DELAY vrg_a_16$D_IN;
	if (vrg_a_17$EN) vrg_a_17 <= `BSV_ASSIGNMENT_DELAY vrg_a_17$D_IN;
	if (vrg_a_18$EN) vrg_a_18 <= `BSV_ASSIGNMENT_DELAY vrg_a_18$D_IN;
	if (vrg_a_19$EN) vrg_a_19 <= `BSV_ASSIGNMENT_DELAY vrg_a_19$D_IN;
	if (vrg_a_2$EN) vrg_a_2 <= `BSV_ASSIGNMENT_DELAY vrg_a_2$D_IN;
	if (vrg_a_20$EN) vrg_a_20 <= `BSV_ASSIGNMENT_DELAY vrg_a_20$D_IN;
	if (vrg_a_21$EN) vrg_a_21 <= `BSV_ASSIGNMENT_DELAY vrg_a_21$D_IN;
	if (vrg_a_22$EN) vrg_a_22 <= `BSV_ASSIGNMENT_DELAY vrg_a_22$D_IN;
	if (vrg_a_23$EN) vrg_a_23 <= `BSV_ASSIGNMENT_DELAY vrg_a_23$D_IN;
	if (vrg_a_3$EN) vrg_a_3 <= `BSV_ASSIGNMENT_DELAY vrg_a_3$D_IN;
	if (vrg_a_4$EN) vrg_a_4 <= `BSV_ASSIGNMENT_DELAY vrg_a_4$D_IN;
	if (vrg_a_5$EN) vrg_a_5 <= `BSV_ASSIGNMENT_DELAY vrg_a_5$D_IN;
	if (vrg_a_6$EN) vrg_a_6 <= `BSV_ASSIGNMENT_DELAY vrg_a_6$D_IN;
	if (vrg_a_7$EN) vrg_a_7 <= `BSV_ASSIGNMENT_DELAY vrg_a_7$D_IN;
	if (vrg_a_8$EN) vrg_a_8 <= `BSV_ASSIGNMENT_DELAY vrg_a_8$D_IN;
	if (vrg_a_9$EN) vrg_a_9 <= `BSV_ASSIGNMENT_DELAY vrg_a_9$D_IN;
	if (vrg_b_0$EN) vrg_b_0 <= `BSV_ASSIGNMENT_DELAY vrg_b_0$D_IN;
	if (vrg_b_1$EN) vrg_b_1 <= `BSV_ASSIGNMENT_DELAY vrg_b_1$D_IN;
	if (vrg_b_10$EN) vrg_b_10 <= `BSV_ASSIGNMENT_DELAY vrg_b_10$D_IN;
	if (vrg_b_11$EN) vrg_b_11 <= `BSV_ASSIGNMENT_DELAY vrg_b_11$D_IN;
	if (vrg_b_12$EN) vrg_b_12 <= `BSV_ASSIGNMENT_DELAY vrg_b_12$D_IN;
	if (vrg_b_13$EN) vrg_b_13 <= `BSV_ASSIGNMENT_DELAY vrg_b_13$D_IN;
	if (vrg_b_14$EN) vrg_b_14 <= `BSV_ASSIGNMENT_DELAY vrg_b_14$D_IN;
	if (vrg_b_15$EN) vrg_b_15 <= `BSV_ASSIGNMENT_DELAY vrg_b_15$D_IN;
	if (vrg_b_2$EN) vrg_b_2 <= `BSV_ASSIGNMENT_DELAY vrg_b_2$D_IN;
	if (vrg_b_3$EN) vrg_b_3 <= `BSV_ASSIGNMENT_DELAY vrg_b_3$D_IN;
	if (vrg_b_4$EN) vrg_b_4 <= `BSV_ASSIGNMENT_DELAY vrg_b_4$D_IN;
	if (vrg_b_5$EN) vrg_b_5 <= `BSV_ASSIGNMENT_DELAY vrg_b_5$D_IN;
	if (vrg_b_6$EN) vrg_b_6 <= `BSV_ASSIGNMENT_DELAY vrg_b_6$D_IN;
	if (vrg_b_7$EN) vrg_b_7 <= `BSV_ASSIGNMENT_DELAY vrg_b_7$D_IN;
	if (vrg_b_8$EN) vrg_b_8 <= `BSV_ASSIGNMENT_DELAY vrg_b_8$D_IN;
	if (vrg_b_9$EN) vrg_b_9 <= `BSV_ASSIGNMENT_DELAY vrg_b_9$D_IN;
	if (vrg_c_0$EN) vrg_c_0 <= `BSV_ASSIGNMENT_DELAY vrg_c_0$D_IN;
	if (vrg_c_1$EN) vrg_c_1 <= `BSV_ASSIGNMENT_DELAY vrg_c_1$D_IN;
	if (vrg_c_10$EN) vrg_c_10 <= `BSV_ASSIGNMENT_DELAY vrg_c_10$D_IN;
	if (vrg_c_11$EN) vrg_c_11 <= `BSV_ASSIGNMENT_DELAY vrg_c_11$D_IN;
	if (vrg_c_12$EN) vrg_c_12 <= `BSV_ASSIGNMENT_DELAY vrg_c_12$D_IN;
	if (vrg_c_13$EN) vrg_c_13 <= `BSV_ASSIGNMENT_DELAY vrg_c_13$D_IN;
	if (vrg_c_14$EN) vrg_c_14 <= `BSV_ASSIGNMENT_DELAY vrg_c_14$D_IN;
	if (vrg_c_15$EN) vrg_c_15 <= `BSV_ASSIGNMENT_DELAY vrg_c_15$D_IN;
	if (vrg_c_2$EN) vrg_c_2 <= `BSV_ASSIGNMENT_DELAY vrg_c_2$D_IN;
	if (vrg_c_3$EN) vrg_c_3 <= `BSV_ASSIGNMENT_DELAY vrg_c_3$D_IN;
	if (vrg_c_4$EN) vrg_c_4 <= `BSV_ASSIGNMENT_DELAY vrg_c_4$D_IN;
	if (vrg_c_5$EN) vrg_c_5 <= `BSV_ASSIGNMENT_DELAY vrg_c_5$D_IN;
	if (vrg_c_6$EN) vrg_c_6 <= `BSV_ASSIGNMENT_DELAY vrg_c_6$D_IN;
	if (vrg_c_7$EN) vrg_c_7 <= `BSV_ASSIGNMENT_DELAY vrg_c_7$D_IN;
	if (vrg_c_8$EN) vrg_c_8 <= `BSV_ASSIGNMENT_DELAY vrg_c_8$D_IN;
	if (vrg_c_9$EN) vrg_c_9 <= `BSV_ASSIGNMENT_DELAY vrg_c_9$D_IN;
	if (vrg_op_0$EN) vrg_op_0 <= `BSV_ASSIGNMENT_DELAY vrg_op_0$D_IN;
	if (vrg_op_1$EN) vrg_op_1 <= `BSV_ASSIGNMENT_DELAY vrg_op_1$D_IN;
	if (vrg_op_10$EN) vrg_op_10 <= `BSV_ASSIGNMENT_DELAY vrg_op_10$D_IN;
	if (vrg_op_11$EN) vrg_op_11 <= `BSV_ASSIGNMENT_DELAY vrg_op_11$D_IN;
	if (vrg_op_12$EN) vrg_op_12 <= `BSV_ASSIGNMENT_DELAY vrg_op_12$D_IN;
	if (vrg_op_13$EN) vrg_op_13 <= `BSV_ASSIGNMENT_DELAY vrg_op_13$D_IN;
	if (vrg_op_14$EN) vrg_op_14 <= `BSV_ASSIGNMENT_DELAY vrg_op_14$D_IN;
	if (vrg_op_15$EN) vrg_op_15 <= `BSV_ASSIGNMENT_DELAY vrg_op_15$D_IN;
	if (vrg_op_2$EN) vrg_op_2 <= `BSV_ASSIGNMENT_DELAY vrg_op_2$D_IN;
	if (vrg_op_3$EN) vrg_op_3 <= `BSV_ASSIGNMENT_DELAY vrg_op_3$D_IN;
	if (vrg_op_4$EN) vrg_op_4 <= `BSV_ASSIGNMENT_DELAY vrg_op_4$D_IN;
	if (vrg_op_5$EN) vrg_op_5 <= `BSV_ASSIGNMENT_DELAY vrg_op_5$D_IN;
	if (vrg_op_6$EN) vrg_op_6 <= `BSV_ASSIGNMENT_DELAY vrg_op_6$D_IN;
	if (vrg_op_7$EN) vrg_op_7 <= `BSV_ASSIGNMENT_DELAY vrg_op_7$D_IN;
	if (vrg_op_8$EN) vrg_op_8 <= `BSV_ASSIGNMENT_DELAY vrg_op_8$D_IN;
	if (vrg_op_9$EN) vrg_op_9 <= `BSV_ASSIGNMENT_DELAY vrg_op_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a_idx = 32'hAAAAAAAA;
    a_init_idx = 32'hAAAAAAAA;
    b_idx = 32'hAAAAAAAA;
    b_init_idx = 32'hAAAAAAAA;
    count_a = 5'h0A;
    count_b = 4'hA;
    get_pop = 1'h0;
    got_a = 1'h0;
    got_b = 1'h0;
    got_op = 1'h0;
    ipReady = 1'h0;
    mac_idx = 32'hAAAAAAAA;
    opReady = 1'h0;
    op_idx = 32'hAAAAAAAA;
    rg_a = 16'hAAAA;
    rg_b = 16'hAAAA;
    rg_reset = 1'h0;
    row_idx = 2'h2;
    vrg_a_0 = 16'hAAAA;
    vrg_a_1 = 16'hAAAA;
    vrg_a_10 = 16'hAAAA;
    vrg_a_11 = 16'hAAAA;
    vrg_a_12 = 16'hAAAA;
    vrg_a_13 = 16'hAAAA;
    vrg_a_14 = 16'hAAAA;
    vrg_a_15 = 16'hAAAA;
    vrg_a_16 = 16'hAAAA;
    vrg_a_17 = 16'hAAAA;
    vrg_a_18 = 16'hAAAA;
    vrg_a_19 = 16'hAAAA;
    vrg_a_2 = 16'hAAAA;
    vrg_a_20 = 16'hAAAA;
    vrg_a_21 = 16'hAAAA;
    vrg_a_22 = 16'hAAAA;
    vrg_a_23 = 16'hAAAA;
    vrg_a_3 = 16'hAAAA;
    vrg_a_4 = 16'hAAAA;
    vrg_a_5 = 16'hAAAA;
    vrg_a_6 = 16'hAAAA;
    vrg_a_7 = 16'hAAAA;
    vrg_a_8 = 16'hAAAA;
    vrg_a_9 = 16'hAAAA;
    vrg_b_0 = 16'hAAAA;
    vrg_b_1 = 16'hAAAA;
    vrg_b_10 = 16'hAAAA;
    vrg_b_11 = 16'hAAAA;
    vrg_b_12 = 16'hAAAA;
    vrg_b_13 = 16'hAAAA;
    vrg_b_14 = 16'hAAAA;
    vrg_b_15 = 16'hAAAA;
    vrg_b_2 = 16'hAAAA;
    vrg_b_3 = 16'hAAAA;
    vrg_b_4 = 16'hAAAA;
    vrg_b_5 = 16'hAAAA;
    vrg_b_6 = 16'hAAAA;
    vrg_b_7 = 16'hAAAA;
    vrg_b_8 = 16'hAAAA;
    vrg_b_9 = 16'hAAAA;
    vrg_c_0 = 32'hAAAAAAAA;
    vrg_c_1 = 32'hAAAAAAAA;
    vrg_c_10 = 32'hAAAAAAAA;
    vrg_c_11 = 32'hAAAAAAAA;
    vrg_c_12 = 32'hAAAAAAAA;
    vrg_c_13 = 32'hAAAAAAAA;
    vrg_c_14 = 32'hAAAAAAAA;
    vrg_c_15 = 32'hAAAAAAAA;
    vrg_c_2 = 32'hAAAAAAAA;
    vrg_c_3 = 32'hAAAAAAAA;
    vrg_c_4 = 32'hAAAAAAAA;
    vrg_c_5 = 32'hAAAAAAAA;
    vrg_c_6 = 32'hAAAAAAAA;
    vrg_c_7 = 32'hAAAAAAAA;
    vrg_c_8 = 32'hAAAAAAAA;
    vrg_c_9 = 32'hAAAAAAAA;
    vrg_op_0 = 32'hAAAAAAAA;
    vrg_op_1 = 32'hAAAAAAAA;
    vrg_op_10 = 32'hAAAAAAAA;
    vrg_op_11 = 32'hAAAAAAAA;
    vrg_op_12 = 32'hAAAAAAAA;
    vrg_op_13 = 32'hAAAAAAAA;
    vrg_op_14 = 32'hAAAAAAAA;
    vrg_op_15 = 32'hAAAAAAAA;
    vrg_op_2 = 32'hAAAAAAAA;
    vrg_op_3 = 32'hAAAAAAAA;
    vrg_op_4 = 32'hAAAAAAAA;
    vrg_op_5 = 32'hAAAAAAAA;
    vrg_op_6 = 32'hAAAAAAAA;
    vrg_op_7 = 32'hAAAAAAAA;
    vrg_op_8 = 32'hAAAAAAAA;
    vrg_op_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSystolicArray

