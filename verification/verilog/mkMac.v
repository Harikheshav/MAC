//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Tue Oct 29 01:08:41 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_a                          O     1 const
// RDY_b                          O     1 const
// RDY_c                          O     1 const
// mac_op                         O    32
// RDY_mac_op                     O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// a_x                            I    16 reg
// b_x                            I    16 reg
// c_x                            I    32 reg
// EN_a                           I     1
// EN_b                           I     1
// EN_c                           I     1
// EN_mac_op                      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMac(CLK,
	     RST_N,

	     a_x,
	     EN_a,
	     RDY_a,

	     b_x,
	     EN_b,
	     RDY_b,

	     c_x,
	     EN_c,
	     RDY_c,

	     EN_mac_op,
	     mac_op,
	     RDY_mac_op);
  input  CLK;
  input  RST_N;

  // action method a
  input  [15 : 0] a_x;
  input  EN_a;
  output RDY_a;

  // action method b
  input  [15 : 0] b_x;
  input  EN_b;
  output RDY_b;

  // action method c
  input  [31 : 0] c_x;
  input  EN_c;
  output RDY_c;

  // actionvalue method mac_op
  input  EN_mac_op;
  output [31 : 0] mac_op;
  output RDY_mac_op;

  // signals for module outputs
  wire [31 : 0] mac_op;
  wire RDY_a, RDY_b, RDY_c, RDY_mac_op;

  // register adder_subractor_got_ip
  reg adder_subractor_got_ip;
  wire adder_subractor_got_ip$D_IN, adder_subractor_got_ip$EN;

  // register adder_subractor_rg_ip
  reg [63 : 0] adder_subractor_rg_ip;
  wire [63 : 0] adder_subractor_rg_ip$D_IN;
  wire adder_subractor_rg_ip$EN;

  // register adder_subractor_rg_sub
  reg adder_subractor_rg_sub;
  wire adder_subractor_rg_sub$D_IN, adder_subractor_rg_sub$EN;

  // register got_a
  reg got_a;
  wire got_a$D_IN, got_a$EN;

  // register got_b
  reg got_b;
  wire got_b$D_IN, got_b$EN;

  // register got_c
  reg got_c;
  wire got_c$D_IN, got_c$EN;

  // register rg_a
  reg [15 : 0] rg_a;
  wire [15 : 0] rg_a$D_IN;
  wire rg_a$EN;

  // register rg_b
  reg [15 : 0] rg_b;
  wire [15 : 0] rg_b$D_IN;
  wire rg_b$EN;

  // register rg_c
  reg [31 : 0] rg_c;
  wire [31 : 0] rg_c$D_IN;
  wire rg_c$EN;

  // ports of submodule adder_subractor_fas_0
  wire adder_subractor_fas_0$borrow,
       adder_subractor_fas_0$borrow_a,
       adder_subractor_fas_0$borrow_b,
       adder_subractor_fas_0$borrow_bin,
       adder_subractor_fas_0$carry,
       adder_subractor_fas_0$carry_a,
       adder_subractor_fas_0$carry_b,
       adder_subractor_fas_0$carry_cin,
       adder_subractor_fas_0$difference,
       adder_subractor_fas_0$difference_a,
       adder_subractor_fas_0$difference_b,
       adder_subractor_fas_0$difference_bin,
       adder_subractor_fas_0$sum,
       adder_subractor_fas_0$sum_a,
       adder_subractor_fas_0$sum_b,
       adder_subractor_fas_0$sum_cin;

  // ports of submodule adder_subractor_fas_1
  wire adder_subractor_fas_1$borrow,
       adder_subractor_fas_1$borrow_a,
       adder_subractor_fas_1$borrow_b,
       adder_subractor_fas_1$borrow_bin,
       adder_subractor_fas_1$carry,
       adder_subractor_fas_1$carry_a,
       adder_subractor_fas_1$carry_b,
       adder_subractor_fas_1$carry_cin,
       adder_subractor_fas_1$difference,
       adder_subractor_fas_1$difference_a,
       adder_subractor_fas_1$difference_b,
       adder_subractor_fas_1$difference_bin,
       adder_subractor_fas_1$sum,
       adder_subractor_fas_1$sum_a,
       adder_subractor_fas_1$sum_b,
       adder_subractor_fas_1$sum_cin;

  // ports of submodule adder_subractor_fas_10
  wire adder_subractor_fas_10$borrow,
       adder_subractor_fas_10$borrow_a,
       adder_subractor_fas_10$borrow_b,
       adder_subractor_fas_10$borrow_bin,
       adder_subractor_fas_10$carry,
       adder_subractor_fas_10$carry_a,
       adder_subractor_fas_10$carry_b,
       adder_subractor_fas_10$carry_cin,
       adder_subractor_fas_10$difference,
       adder_subractor_fas_10$difference_a,
       adder_subractor_fas_10$difference_b,
       adder_subractor_fas_10$difference_bin,
       adder_subractor_fas_10$sum,
       adder_subractor_fas_10$sum_a,
       adder_subractor_fas_10$sum_b,
       adder_subractor_fas_10$sum_cin;

  // ports of submodule adder_subractor_fas_11
  wire adder_subractor_fas_11$borrow,
       adder_subractor_fas_11$borrow_a,
       adder_subractor_fas_11$borrow_b,
       adder_subractor_fas_11$borrow_bin,
       adder_subractor_fas_11$carry,
       adder_subractor_fas_11$carry_a,
       adder_subractor_fas_11$carry_b,
       adder_subractor_fas_11$carry_cin,
       adder_subractor_fas_11$difference,
       adder_subractor_fas_11$difference_a,
       adder_subractor_fas_11$difference_b,
       adder_subractor_fas_11$difference_bin,
       adder_subractor_fas_11$sum,
       adder_subractor_fas_11$sum_a,
       adder_subractor_fas_11$sum_b,
       adder_subractor_fas_11$sum_cin;

  // ports of submodule adder_subractor_fas_12
  wire adder_subractor_fas_12$borrow,
       adder_subractor_fas_12$borrow_a,
       adder_subractor_fas_12$borrow_b,
       adder_subractor_fas_12$borrow_bin,
       adder_subractor_fas_12$carry,
       adder_subractor_fas_12$carry_a,
       adder_subractor_fas_12$carry_b,
       adder_subractor_fas_12$carry_cin,
       adder_subractor_fas_12$difference,
       adder_subractor_fas_12$difference_a,
       adder_subractor_fas_12$difference_b,
       adder_subractor_fas_12$difference_bin,
       adder_subractor_fas_12$sum,
       adder_subractor_fas_12$sum_a,
       adder_subractor_fas_12$sum_b,
       adder_subractor_fas_12$sum_cin;

  // ports of submodule adder_subractor_fas_13
  wire adder_subractor_fas_13$borrow,
       adder_subractor_fas_13$borrow_a,
       adder_subractor_fas_13$borrow_b,
       adder_subractor_fas_13$borrow_bin,
       adder_subractor_fas_13$carry,
       adder_subractor_fas_13$carry_a,
       adder_subractor_fas_13$carry_b,
       adder_subractor_fas_13$carry_cin,
       adder_subractor_fas_13$difference,
       adder_subractor_fas_13$difference_a,
       adder_subractor_fas_13$difference_b,
       adder_subractor_fas_13$difference_bin,
       adder_subractor_fas_13$sum,
       adder_subractor_fas_13$sum_a,
       adder_subractor_fas_13$sum_b,
       adder_subractor_fas_13$sum_cin;

  // ports of submodule adder_subractor_fas_14
  wire adder_subractor_fas_14$borrow,
       adder_subractor_fas_14$borrow_a,
       adder_subractor_fas_14$borrow_b,
       adder_subractor_fas_14$borrow_bin,
       adder_subractor_fas_14$carry,
       adder_subractor_fas_14$carry_a,
       adder_subractor_fas_14$carry_b,
       adder_subractor_fas_14$carry_cin,
       adder_subractor_fas_14$difference,
       adder_subractor_fas_14$difference_a,
       adder_subractor_fas_14$difference_b,
       adder_subractor_fas_14$difference_bin,
       adder_subractor_fas_14$sum,
       adder_subractor_fas_14$sum_a,
       adder_subractor_fas_14$sum_b,
       adder_subractor_fas_14$sum_cin;

  // ports of submodule adder_subractor_fas_15
  wire adder_subractor_fas_15$borrow,
       adder_subractor_fas_15$borrow_a,
       adder_subractor_fas_15$borrow_b,
       adder_subractor_fas_15$borrow_bin,
       adder_subractor_fas_15$carry,
       adder_subractor_fas_15$carry_a,
       adder_subractor_fas_15$carry_b,
       adder_subractor_fas_15$carry_cin,
       adder_subractor_fas_15$difference,
       adder_subractor_fas_15$difference_a,
       adder_subractor_fas_15$difference_b,
       adder_subractor_fas_15$difference_bin,
       adder_subractor_fas_15$sum,
       adder_subractor_fas_15$sum_a,
       adder_subractor_fas_15$sum_b,
       adder_subractor_fas_15$sum_cin;

  // ports of submodule adder_subractor_fas_16
  wire adder_subractor_fas_16$borrow,
       adder_subractor_fas_16$borrow_a,
       adder_subractor_fas_16$borrow_b,
       adder_subractor_fas_16$borrow_bin,
       adder_subractor_fas_16$carry,
       adder_subractor_fas_16$carry_a,
       adder_subractor_fas_16$carry_b,
       adder_subractor_fas_16$carry_cin,
       adder_subractor_fas_16$difference,
       adder_subractor_fas_16$difference_a,
       adder_subractor_fas_16$difference_b,
       adder_subractor_fas_16$difference_bin,
       adder_subractor_fas_16$sum,
       adder_subractor_fas_16$sum_a,
       adder_subractor_fas_16$sum_b,
       adder_subractor_fas_16$sum_cin;

  // ports of submodule adder_subractor_fas_17
  wire adder_subractor_fas_17$borrow,
       adder_subractor_fas_17$borrow_a,
       adder_subractor_fas_17$borrow_b,
       adder_subractor_fas_17$borrow_bin,
       adder_subractor_fas_17$carry,
       adder_subractor_fas_17$carry_a,
       adder_subractor_fas_17$carry_b,
       adder_subractor_fas_17$carry_cin,
       adder_subractor_fas_17$difference,
       adder_subractor_fas_17$difference_a,
       adder_subractor_fas_17$difference_b,
       adder_subractor_fas_17$difference_bin,
       adder_subractor_fas_17$sum,
       adder_subractor_fas_17$sum_a,
       adder_subractor_fas_17$sum_b,
       adder_subractor_fas_17$sum_cin;

  // ports of submodule adder_subractor_fas_18
  wire adder_subractor_fas_18$borrow,
       adder_subractor_fas_18$borrow_a,
       adder_subractor_fas_18$borrow_b,
       adder_subractor_fas_18$borrow_bin,
       adder_subractor_fas_18$carry,
       adder_subractor_fas_18$carry_a,
       adder_subractor_fas_18$carry_b,
       adder_subractor_fas_18$carry_cin,
       adder_subractor_fas_18$difference,
       adder_subractor_fas_18$difference_a,
       adder_subractor_fas_18$difference_b,
       adder_subractor_fas_18$difference_bin,
       adder_subractor_fas_18$sum,
       adder_subractor_fas_18$sum_a,
       adder_subractor_fas_18$sum_b,
       adder_subractor_fas_18$sum_cin;

  // ports of submodule adder_subractor_fas_19
  wire adder_subractor_fas_19$borrow,
       adder_subractor_fas_19$borrow_a,
       adder_subractor_fas_19$borrow_b,
       adder_subractor_fas_19$borrow_bin,
       adder_subractor_fas_19$carry,
       adder_subractor_fas_19$carry_a,
       adder_subractor_fas_19$carry_b,
       adder_subractor_fas_19$carry_cin,
       adder_subractor_fas_19$difference,
       adder_subractor_fas_19$difference_a,
       adder_subractor_fas_19$difference_b,
       adder_subractor_fas_19$difference_bin,
       adder_subractor_fas_19$sum,
       adder_subractor_fas_19$sum_a,
       adder_subractor_fas_19$sum_b,
       adder_subractor_fas_19$sum_cin;

  // ports of submodule adder_subractor_fas_2
  wire adder_subractor_fas_2$borrow,
       adder_subractor_fas_2$borrow_a,
       adder_subractor_fas_2$borrow_b,
       adder_subractor_fas_2$borrow_bin,
       adder_subractor_fas_2$carry,
       adder_subractor_fas_2$carry_a,
       adder_subractor_fas_2$carry_b,
       adder_subractor_fas_2$carry_cin,
       adder_subractor_fas_2$difference,
       adder_subractor_fas_2$difference_a,
       adder_subractor_fas_2$difference_b,
       adder_subractor_fas_2$difference_bin,
       adder_subractor_fas_2$sum,
       adder_subractor_fas_2$sum_a,
       adder_subractor_fas_2$sum_b,
       adder_subractor_fas_2$sum_cin;

  // ports of submodule adder_subractor_fas_20
  wire adder_subractor_fas_20$borrow,
       adder_subractor_fas_20$borrow_a,
       adder_subractor_fas_20$borrow_b,
       adder_subractor_fas_20$borrow_bin,
       adder_subractor_fas_20$carry,
       adder_subractor_fas_20$carry_a,
       adder_subractor_fas_20$carry_b,
       adder_subractor_fas_20$carry_cin,
       adder_subractor_fas_20$difference,
       adder_subractor_fas_20$difference_a,
       adder_subractor_fas_20$difference_b,
       adder_subractor_fas_20$difference_bin,
       adder_subractor_fas_20$sum,
       adder_subractor_fas_20$sum_a,
       adder_subractor_fas_20$sum_b,
       adder_subractor_fas_20$sum_cin;

  // ports of submodule adder_subractor_fas_21
  wire adder_subractor_fas_21$borrow,
       adder_subractor_fas_21$borrow_a,
       adder_subractor_fas_21$borrow_b,
       adder_subractor_fas_21$borrow_bin,
       adder_subractor_fas_21$carry,
       adder_subractor_fas_21$carry_a,
       adder_subractor_fas_21$carry_b,
       adder_subractor_fas_21$carry_cin,
       adder_subractor_fas_21$difference,
       adder_subractor_fas_21$difference_a,
       adder_subractor_fas_21$difference_b,
       adder_subractor_fas_21$difference_bin,
       adder_subractor_fas_21$sum,
       adder_subractor_fas_21$sum_a,
       adder_subractor_fas_21$sum_b,
       adder_subractor_fas_21$sum_cin;

  // ports of submodule adder_subractor_fas_22
  wire adder_subractor_fas_22$borrow,
       adder_subractor_fas_22$borrow_a,
       adder_subractor_fas_22$borrow_b,
       adder_subractor_fas_22$borrow_bin,
       adder_subractor_fas_22$carry,
       adder_subractor_fas_22$carry_a,
       adder_subractor_fas_22$carry_b,
       adder_subractor_fas_22$carry_cin,
       adder_subractor_fas_22$difference,
       adder_subractor_fas_22$difference_a,
       adder_subractor_fas_22$difference_b,
       adder_subractor_fas_22$difference_bin,
       adder_subractor_fas_22$sum,
       adder_subractor_fas_22$sum_a,
       adder_subractor_fas_22$sum_b,
       adder_subractor_fas_22$sum_cin;

  // ports of submodule adder_subractor_fas_23
  wire adder_subractor_fas_23$borrow,
       adder_subractor_fas_23$borrow_a,
       adder_subractor_fas_23$borrow_b,
       adder_subractor_fas_23$borrow_bin,
       adder_subractor_fas_23$carry,
       adder_subractor_fas_23$carry_a,
       adder_subractor_fas_23$carry_b,
       adder_subractor_fas_23$carry_cin,
       adder_subractor_fas_23$difference,
       adder_subractor_fas_23$difference_a,
       adder_subractor_fas_23$difference_b,
       adder_subractor_fas_23$difference_bin,
       adder_subractor_fas_23$sum,
       adder_subractor_fas_23$sum_a,
       adder_subractor_fas_23$sum_b,
       adder_subractor_fas_23$sum_cin;

  // ports of submodule adder_subractor_fas_24
  wire adder_subractor_fas_24$borrow,
       adder_subractor_fas_24$borrow_a,
       adder_subractor_fas_24$borrow_b,
       adder_subractor_fas_24$borrow_bin,
       adder_subractor_fas_24$carry,
       adder_subractor_fas_24$carry_a,
       adder_subractor_fas_24$carry_b,
       adder_subractor_fas_24$carry_cin,
       adder_subractor_fas_24$difference,
       adder_subractor_fas_24$difference_a,
       adder_subractor_fas_24$difference_b,
       adder_subractor_fas_24$difference_bin,
       adder_subractor_fas_24$sum,
       adder_subractor_fas_24$sum_a,
       adder_subractor_fas_24$sum_b,
       adder_subractor_fas_24$sum_cin;

  // ports of submodule adder_subractor_fas_25
  wire adder_subractor_fas_25$borrow,
       adder_subractor_fas_25$borrow_a,
       adder_subractor_fas_25$borrow_b,
       adder_subractor_fas_25$borrow_bin,
       adder_subractor_fas_25$carry,
       adder_subractor_fas_25$carry_a,
       adder_subractor_fas_25$carry_b,
       adder_subractor_fas_25$carry_cin,
       adder_subractor_fas_25$difference,
       adder_subractor_fas_25$difference_a,
       adder_subractor_fas_25$difference_b,
       adder_subractor_fas_25$difference_bin,
       adder_subractor_fas_25$sum,
       adder_subractor_fas_25$sum_a,
       adder_subractor_fas_25$sum_b,
       adder_subractor_fas_25$sum_cin;

  // ports of submodule adder_subractor_fas_26
  wire adder_subractor_fas_26$borrow,
       adder_subractor_fas_26$borrow_a,
       adder_subractor_fas_26$borrow_b,
       adder_subractor_fas_26$borrow_bin,
       adder_subractor_fas_26$carry,
       adder_subractor_fas_26$carry_a,
       adder_subractor_fas_26$carry_b,
       adder_subractor_fas_26$carry_cin,
       adder_subractor_fas_26$difference,
       adder_subractor_fas_26$difference_a,
       adder_subractor_fas_26$difference_b,
       adder_subractor_fas_26$difference_bin,
       adder_subractor_fas_26$sum,
       adder_subractor_fas_26$sum_a,
       adder_subractor_fas_26$sum_b,
       adder_subractor_fas_26$sum_cin;

  // ports of submodule adder_subractor_fas_27
  wire adder_subractor_fas_27$borrow,
       adder_subractor_fas_27$borrow_a,
       adder_subractor_fas_27$borrow_b,
       adder_subractor_fas_27$borrow_bin,
       adder_subractor_fas_27$carry,
       adder_subractor_fas_27$carry_a,
       adder_subractor_fas_27$carry_b,
       adder_subractor_fas_27$carry_cin,
       adder_subractor_fas_27$difference,
       adder_subractor_fas_27$difference_a,
       adder_subractor_fas_27$difference_b,
       adder_subractor_fas_27$difference_bin,
       adder_subractor_fas_27$sum,
       adder_subractor_fas_27$sum_a,
       adder_subractor_fas_27$sum_b,
       adder_subractor_fas_27$sum_cin;

  // ports of submodule adder_subractor_fas_28
  wire adder_subractor_fas_28$borrow,
       adder_subractor_fas_28$borrow_a,
       adder_subractor_fas_28$borrow_b,
       adder_subractor_fas_28$borrow_bin,
       adder_subractor_fas_28$carry,
       adder_subractor_fas_28$carry_a,
       adder_subractor_fas_28$carry_b,
       adder_subractor_fas_28$carry_cin,
       adder_subractor_fas_28$difference,
       adder_subractor_fas_28$difference_a,
       adder_subractor_fas_28$difference_b,
       adder_subractor_fas_28$difference_bin,
       adder_subractor_fas_28$sum,
       adder_subractor_fas_28$sum_a,
       adder_subractor_fas_28$sum_b,
       adder_subractor_fas_28$sum_cin;

  // ports of submodule adder_subractor_fas_29
  wire adder_subractor_fas_29$borrow,
       adder_subractor_fas_29$borrow_a,
       adder_subractor_fas_29$borrow_b,
       adder_subractor_fas_29$borrow_bin,
       adder_subractor_fas_29$carry,
       adder_subractor_fas_29$carry_a,
       adder_subractor_fas_29$carry_b,
       adder_subractor_fas_29$carry_cin,
       adder_subractor_fas_29$difference,
       adder_subractor_fas_29$difference_a,
       adder_subractor_fas_29$difference_b,
       adder_subractor_fas_29$difference_bin,
       adder_subractor_fas_29$sum,
       adder_subractor_fas_29$sum_a,
       adder_subractor_fas_29$sum_b,
       adder_subractor_fas_29$sum_cin;

  // ports of submodule adder_subractor_fas_3
  wire adder_subractor_fas_3$borrow,
       adder_subractor_fas_3$borrow_a,
       adder_subractor_fas_3$borrow_b,
       adder_subractor_fas_3$borrow_bin,
       adder_subractor_fas_3$carry,
       adder_subractor_fas_3$carry_a,
       adder_subractor_fas_3$carry_b,
       adder_subractor_fas_3$carry_cin,
       adder_subractor_fas_3$difference,
       adder_subractor_fas_3$difference_a,
       adder_subractor_fas_3$difference_b,
       adder_subractor_fas_3$difference_bin,
       adder_subractor_fas_3$sum,
       adder_subractor_fas_3$sum_a,
       adder_subractor_fas_3$sum_b,
       adder_subractor_fas_3$sum_cin;

  // ports of submodule adder_subractor_fas_30
  wire adder_subractor_fas_30$borrow,
       adder_subractor_fas_30$borrow_a,
       adder_subractor_fas_30$borrow_b,
       adder_subractor_fas_30$borrow_bin,
       adder_subractor_fas_30$carry,
       adder_subractor_fas_30$carry_a,
       adder_subractor_fas_30$carry_b,
       adder_subractor_fas_30$carry_cin,
       adder_subractor_fas_30$difference,
       adder_subractor_fas_30$difference_a,
       adder_subractor_fas_30$difference_b,
       adder_subractor_fas_30$difference_bin,
       adder_subractor_fas_30$sum,
       adder_subractor_fas_30$sum_a,
       adder_subractor_fas_30$sum_b,
       adder_subractor_fas_30$sum_cin;

  // ports of submodule adder_subractor_fas_31
  wire adder_subractor_fas_31$borrow,
       adder_subractor_fas_31$borrow_a,
       adder_subractor_fas_31$borrow_b,
       adder_subractor_fas_31$borrow_bin,
       adder_subractor_fas_31$carry,
       adder_subractor_fas_31$carry_a,
       adder_subractor_fas_31$carry_b,
       adder_subractor_fas_31$carry_cin,
       adder_subractor_fas_31$difference,
       adder_subractor_fas_31$difference_a,
       adder_subractor_fas_31$difference_b,
       adder_subractor_fas_31$difference_bin,
       adder_subractor_fas_31$sum,
       adder_subractor_fas_31$sum_a,
       adder_subractor_fas_31$sum_b,
       adder_subractor_fas_31$sum_cin;

  // ports of submodule adder_subractor_fas_4
  wire adder_subractor_fas_4$borrow,
       adder_subractor_fas_4$borrow_a,
       adder_subractor_fas_4$borrow_b,
       adder_subractor_fas_4$borrow_bin,
       adder_subractor_fas_4$carry,
       adder_subractor_fas_4$carry_a,
       adder_subractor_fas_4$carry_b,
       adder_subractor_fas_4$carry_cin,
       adder_subractor_fas_4$difference,
       adder_subractor_fas_4$difference_a,
       adder_subractor_fas_4$difference_b,
       adder_subractor_fas_4$difference_bin,
       adder_subractor_fas_4$sum,
       adder_subractor_fas_4$sum_a,
       adder_subractor_fas_4$sum_b,
       adder_subractor_fas_4$sum_cin;

  // ports of submodule adder_subractor_fas_5
  wire adder_subractor_fas_5$borrow,
       adder_subractor_fas_5$borrow_a,
       adder_subractor_fas_5$borrow_b,
       adder_subractor_fas_5$borrow_bin,
       adder_subractor_fas_5$carry,
       adder_subractor_fas_5$carry_a,
       adder_subractor_fas_5$carry_b,
       adder_subractor_fas_5$carry_cin,
       adder_subractor_fas_5$difference,
       adder_subractor_fas_5$difference_a,
       adder_subractor_fas_5$difference_b,
       adder_subractor_fas_5$difference_bin,
       adder_subractor_fas_5$sum,
       adder_subractor_fas_5$sum_a,
       adder_subractor_fas_5$sum_b,
       adder_subractor_fas_5$sum_cin;

  // ports of submodule adder_subractor_fas_6
  wire adder_subractor_fas_6$borrow,
       adder_subractor_fas_6$borrow_a,
       adder_subractor_fas_6$borrow_b,
       adder_subractor_fas_6$borrow_bin,
       adder_subractor_fas_6$carry,
       adder_subractor_fas_6$carry_a,
       adder_subractor_fas_6$carry_b,
       adder_subractor_fas_6$carry_cin,
       adder_subractor_fas_6$difference,
       adder_subractor_fas_6$difference_a,
       adder_subractor_fas_6$difference_b,
       adder_subractor_fas_6$difference_bin,
       adder_subractor_fas_6$sum,
       adder_subractor_fas_6$sum_a,
       adder_subractor_fas_6$sum_b,
       adder_subractor_fas_6$sum_cin;

  // ports of submodule adder_subractor_fas_7
  wire adder_subractor_fas_7$borrow,
       adder_subractor_fas_7$borrow_a,
       adder_subractor_fas_7$borrow_b,
       adder_subractor_fas_7$borrow_bin,
       adder_subractor_fas_7$carry,
       adder_subractor_fas_7$carry_a,
       adder_subractor_fas_7$carry_b,
       adder_subractor_fas_7$carry_cin,
       adder_subractor_fas_7$difference,
       adder_subractor_fas_7$difference_a,
       adder_subractor_fas_7$difference_b,
       adder_subractor_fas_7$difference_bin,
       adder_subractor_fas_7$sum,
       adder_subractor_fas_7$sum_a,
       adder_subractor_fas_7$sum_b,
       adder_subractor_fas_7$sum_cin;

  // ports of submodule adder_subractor_fas_8
  wire adder_subractor_fas_8$borrow,
       adder_subractor_fas_8$borrow_a,
       adder_subractor_fas_8$borrow_b,
       adder_subractor_fas_8$borrow_bin,
       adder_subractor_fas_8$carry,
       adder_subractor_fas_8$carry_a,
       adder_subractor_fas_8$carry_b,
       adder_subractor_fas_8$carry_cin,
       adder_subractor_fas_8$difference,
       adder_subractor_fas_8$difference_a,
       adder_subractor_fas_8$difference_b,
       adder_subractor_fas_8$difference_bin,
       adder_subractor_fas_8$sum,
       adder_subractor_fas_8$sum_a,
       adder_subractor_fas_8$sum_b,
       adder_subractor_fas_8$sum_cin;

  // ports of submodule adder_subractor_fas_9
  wire adder_subractor_fas_9$borrow,
       adder_subractor_fas_9$borrow_a,
       adder_subractor_fas_9$borrow_b,
       adder_subractor_fas_9$borrow_bin,
       adder_subractor_fas_9$carry,
       adder_subractor_fas_9$carry_a,
       adder_subractor_fas_9$carry_b,
       adder_subractor_fas_9$carry_cin,
       adder_subractor_fas_9$difference,
       adder_subractor_fas_9$difference_a,
       adder_subractor_fas_9$difference_b,
       adder_subractor_fas_9$difference_bin,
       adder_subractor_fas_9$sum,
       adder_subractor_fas_9$sum_a,
       adder_subractor_fas_9$sum_b,
       adder_subractor_fas_9$sum_cin;

  // ports of submodule multiplier
  wire [31 : 0] multiplier$op;
  wire [15 : 0] multiplier$inp_a, multiplier$inp_b;
  wire multiplier$EN_inp,
       multiplier$EN_op,
       multiplier$RDY_inp,
       multiplier$RDY_op;

  // rule scheduling signals
  wire CAN_FIRE_RL_adder_subractor_rl_sum,
       CAN_FIRE_RL_rl_add,
       CAN_FIRE_RL_rl_mul,
       CAN_FIRE_a,
       CAN_FIRE_b,
       CAN_FIRE_c,
       CAN_FIRE_mac_op,
       WILL_FIRE_RL_adder_subractor_rl_sum,
       WILL_FIRE_RL_rl_add,
       WILL_FIRE_RL_rl_mul,
       WILL_FIRE_a,
       WILL_FIRE_b,
       WILL_FIRE_c,
       WILL_FIRE_mac_op;

  // inputs to muxes for submodule ports
  wire MUX_adder_subractor_got_ip$write_1__SEL_2;

  // remaining internal signals
  wire [33 : 0] x__h24017;
  wire [32 : 0] new_value_sum_difference__h5998;
  wire [31 : 0] IF_adder_subractor_rg_sub_THEN_theResult___snd_ETC__q1,
		_theResult___snd__h7087,
		_theResult___snd__h8094,
		x__h15583;
  wire [30 : 0] IF_adder_subractor_rg_sub_THEN_IF_adder_subrac_ETC___d271;
  wire [29 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d289;
  wire [27 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d288;
  wire [25 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d287;
  wire [23 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d286;
  wire [21 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d285;
  wire [19 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d284;
  wire [17 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d283;
  wire [15 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d282;
  wire [13 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d281;
  wire [11 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d280;
  wire [9 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d279;
  wire [7 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d278;
  wire [5 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d277;
  wire [3 : 0] IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d276;
  wire [1 : 0] IF_adder_subractor_rg_sub_THEN_IF_adder_subrac_ETC___d275;
  wire IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d168,
       new_value_carry_burrow__h5997;

  // action method a
  assign RDY_a = 1'd1 ;
  assign CAN_FIRE_a = 1'd1 ;
  assign WILL_FIRE_a = EN_a ;

  // action method b
  assign RDY_b = 1'd1 ;
  assign CAN_FIRE_b = 1'd1 ;
  assign WILL_FIRE_b = EN_b ;

  // action method c
  assign RDY_c = 1'd1 ;
  assign CAN_FIRE_c = 1'd1 ;
  assign WILL_FIRE_c = EN_c ;

  // actionvalue method mac_op
  assign mac_op = x__h24017[31:0] ;
  assign RDY_mac_op = got_a && got_b && got_c && adder_subractor_got_ip ;
  assign CAN_FIRE_mac_op = got_a && got_b && got_c && adder_subractor_got_ip ;
  assign WILL_FIRE_mac_op = EN_mac_op ;

  // submodule adder_subractor_fas_0
  mkfullAdderSubractor adder_subractor_fas_0(.CLK(CLK),
					     .RST_N(RST_N),
					     .borrow_a(adder_subractor_fas_0$borrow_a),
					     .borrow_b(adder_subractor_fas_0$borrow_b),
					     .borrow_bin(adder_subractor_fas_0$borrow_bin),
					     .carry_a(adder_subractor_fas_0$carry_a),
					     .carry_b(adder_subractor_fas_0$carry_b),
					     .carry_cin(adder_subractor_fas_0$carry_cin),
					     .difference_a(adder_subractor_fas_0$difference_a),
					     .difference_b(adder_subractor_fas_0$difference_b),
					     .difference_bin(adder_subractor_fas_0$difference_bin),
					     .sum_a(adder_subractor_fas_0$sum_a),
					     .sum_b(adder_subractor_fas_0$sum_b),
					     .sum_cin(adder_subractor_fas_0$sum_cin),
					     .sum(adder_subractor_fas_0$sum),
					     .RDY_sum(),
					     .carry(adder_subractor_fas_0$carry),
					     .RDY_carry(),
					     .difference(adder_subractor_fas_0$difference),
					     .RDY_difference(),
					     .borrow(adder_subractor_fas_0$borrow),
					     .RDY_borrow());

  // submodule adder_subractor_fas_1
  mkfullAdderSubractor adder_subractor_fas_1(.CLK(CLK),
					     .RST_N(RST_N),
					     .borrow_a(adder_subractor_fas_1$borrow_a),
					     .borrow_b(adder_subractor_fas_1$borrow_b),
					     .borrow_bin(adder_subractor_fas_1$borrow_bin),
					     .carry_a(adder_subractor_fas_1$carry_a),
					     .carry_b(adder_subractor_fas_1$carry_b),
					     .carry_cin(adder_subractor_fas_1$carry_cin),
					     .difference_a(adder_subractor_fas_1$difference_a),
					     .difference_b(adder_subractor_fas_1$difference_b),
					     .difference_bin(adder_subractor_fas_1$difference_bin),
					     .sum_a(adder_subractor_fas_1$sum_a),
					     .sum_b(adder_subractor_fas_1$sum_b),
					     .sum_cin(adder_subractor_fas_1$sum_cin),
					     .sum(adder_subractor_fas_1$sum),
					     .RDY_sum(),
					     .carry(adder_subractor_fas_1$carry),
					     .RDY_carry(),
					     .difference(adder_subractor_fas_1$difference),
					     .RDY_difference(),
					     .borrow(adder_subractor_fas_1$borrow),
					     .RDY_borrow());

  // submodule adder_subractor_fas_10
  mkfullAdderSubractor adder_subractor_fas_10(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_10$borrow_a),
					      .borrow_b(adder_subractor_fas_10$borrow_b),
					      .borrow_bin(adder_subractor_fas_10$borrow_bin),
					      .carry_a(adder_subractor_fas_10$carry_a),
					      .carry_b(adder_subractor_fas_10$carry_b),
					      .carry_cin(adder_subractor_fas_10$carry_cin),
					      .difference_a(adder_subractor_fas_10$difference_a),
					      .difference_b(adder_subractor_fas_10$difference_b),
					      .difference_bin(adder_subractor_fas_10$difference_bin),
					      .sum_a(adder_subractor_fas_10$sum_a),
					      .sum_b(adder_subractor_fas_10$sum_b),
					      .sum_cin(adder_subractor_fas_10$sum_cin),
					      .sum(adder_subractor_fas_10$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_10$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_10$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_10$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_11
  mkfullAdderSubractor adder_subractor_fas_11(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_11$borrow_a),
					      .borrow_b(adder_subractor_fas_11$borrow_b),
					      .borrow_bin(adder_subractor_fas_11$borrow_bin),
					      .carry_a(adder_subractor_fas_11$carry_a),
					      .carry_b(adder_subractor_fas_11$carry_b),
					      .carry_cin(adder_subractor_fas_11$carry_cin),
					      .difference_a(adder_subractor_fas_11$difference_a),
					      .difference_b(adder_subractor_fas_11$difference_b),
					      .difference_bin(adder_subractor_fas_11$difference_bin),
					      .sum_a(adder_subractor_fas_11$sum_a),
					      .sum_b(adder_subractor_fas_11$sum_b),
					      .sum_cin(adder_subractor_fas_11$sum_cin),
					      .sum(adder_subractor_fas_11$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_11$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_11$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_11$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_12
  mkfullAdderSubractor adder_subractor_fas_12(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_12$borrow_a),
					      .borrow_b(adder_subractor_fas_12$borrow_b),
					      .borrow_bin(adder_subractor_fas_12$borrow_bin),
					      .carry_a(adder_subractor_fas_12$carry_a),
					      .carry_b(adder_subractor_fas_12$carry_b),
					      .carry_cin(adder_subractor_fas_12$carry_cin),
					      .difference_a(adder_subractor_fas_12$difference_a),
					      .difference_b(adder_subractor_fas_12$difference_b),
					      .difference_bin(adder_subractor_fas_12$difference_bin),
					      .sum_a(adder_subractor_fas_12$sum_a),
					      .sum_b(adder_subractor_fas_12$sum_b),
					      .sum_cin(adder_subractor_fas_12$sum_cin),
					      .sum(adder_subractor_fas_12$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_12$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_12$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_12$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_13
  mkfullAdderSubractor adder_subractor_fas_13(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_13$borrow_a),
					      .borrow_b(adder_subractor_fas_13$borrow_b),
					      .borrow_bin(adder_subractor_fas_13$borrow_bin),
					      .carry_a(adder_subractor_fas_13$carry_a),
					      .carry_b(adder_subractor_fas_13$carry_b),
					      .carry_cin(adder_subractor_fas_13$carry_cin),
					      .difference_a(adder_subractor_fas_13$difference_a),
					      .difference_b(adder_subractor_fas_13$difference_b),
					      .difference_bin(adder_subractor_fas_13$difference_bin),
					      .sum_a(adder_subractor_fas_13$sum_a),
					      .sum_b(adder_subractor_fas_13$sum_b),
					      .sum_cin(adder_subractor_fas_13$sum_cin),
					      .sum(adder_subractor_fas_13$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_13$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_13$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_13$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_14
  mkfullAdderSubractor adder_subractor_fas_14(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_14$borrow_a),
					      .borrow_b(adder_subractor_fas_14$borrow_b),
					      .borrow_bin(adder_subractor_fas_14$borrow_bin),
					      .carry_a(adder_subractor_fas_14$carry_a),
					      .carry_b(adder_subractor_fas_14$carry_b),
					      .carry_cin(adder_subractor_fas_14$carry_cin),
					      .difference_a(adder_subractor_fas_14$difference_a),
					      .difference_b(adder_subractor_fas_14$difference_b),
					      .difference_bin(adder_subractor_fas_14$difference_bin),
					      .sum_a(adder_subractor_fas_14$sum_a),
					      .sum_b(adder_subractor_fas_14$sum_b),
					      .sum_cin(adder_subractor_fas_14$sum_cin),
					      .sum(adder_subractor_fas_14$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_14$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_14$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_14$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_15
  mkfullAdderSubractor adder_subractor_fas_15(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_15$borrow_a),
					      .borrow_b(adder_subractor_fas_15$borrow_b),
					      .borrow_bin(adder_subractor_fas_15$borrow_bin),
					      .carry_a(adder_subractor_fas_15$carry_a),
					      .carry_b(adder_subractor_fas_15$carry_b),
					      .carry_cin(adder_subractor_fas_15$carry_cin),
					      .difference_a(adder_subractor_fas_15$difference_a),
					      .difference_b(adder_subractor_fas_15$difference_b),
					      .difference_bin(adder_subractor_fas_15$difference_bin),
					      .sum_a(adder_subractor_fas_15$sum_a),
					      .sum_b(adder_subractor_fas_15$sum_b),
					      .sum_cin(adder_subractor_fas_15$sum_cin),
					      .sum(adder_subractor_fas_15$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_15$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_15$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_15$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_16
  mkfullAdderSubractor adder_subractor_fas_16(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_16$borrow_a),
					      .borrow_b(adder_subractor_fas_16$borrow_b),
					      .borrow_bin(adder_subractor_fas_16$borrow_bin),
					      .carry_a(adder_subractor_fas_16$carry_a),
					      .carry_b(adder_subractor_fas_16$carry_b),
					      .carry_cin(adder_subractor_fas_16$carry_cin),
					      .difference_a(adder_subractor_fas_16$difference_a),
					      .difference_b(adder_subractor_fas_16$difference_b),
					      .difference_bin(adder_subractor_fas_16$difference_bin),
					      .sum_a(adder_subractor_fas_16$sum_a),
					      .sum_b(adder_subractor_fas_16$sum_b),
					      .sum_cin(adder_subractor_fas_16$sum_cin),
					      .sum(adder_subractor_fas_16$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_16$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_16$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_16$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_17
  mkfullAdderSubractor adder_subractor_fas_17(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_17$borrow_a),
					      .borrow_b(adder_subractor_fas_17$borrow_b),
					      .borrow_bin(adder_subractor_fas_17$borrow_bin),
					      .carry_a(adder_subractor_fas_17$carry_a),
					      .carry_b(adder_subractor_fas_17$carry_b),
					      .carry_cin(adder_subractor_fas_17$carry_cin),
					      .difference_a(adder_subractor_fas_17$difference_a),
					      .difference_b(adder_subractor_fas_17$difference_b),
					      .difference_bin(adder_subractor_fas_17$difference_bin),
					      .sum_a(adder_subractor_fas_17$sum_a),
					      .sum_b(adder_subractor_fas_17$sum_b),
					      .sum_cin(adder_subractor_fas_17$sum_cin),
					      .sum(adder_subractor_fas_17$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_17$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_17$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_17$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_18
  mkfullAdderSubractor adder_subractor_fas_18(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_18$borrow_a),
					      .borrow_b(adder_subractor_fas_18$borrow_b),
					      .borrow_bin(adder_subractor_fas_18$borrow_bin),
					      .carry_a(adder_subractor_fas_18$carry_a),
					      .carry_b(adder_subractor_fas_18$carry_b),
					      .carry_cin(adder_subractor_fas_18$carry_cin),
					      .difference_a(adder_subractor_fas_18$difference_a),
					      .difference_b(adder_subractor_fas_18$difference_b),
					      .difference_bin(adder_subractor_fas_18$difference_bin),
					      .sum_a(adder_subractor_fas_18$sum_a),
					      .sum_b(adder_subractor_fas_18$sum_b),
					      .sum_cin(adder_subractor_fas_18$sum_cin),
					      .sum(adder_subractor_fas_18$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_18$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_18$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_18$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_19
  mkfullAdderSubractor adder_subractor_fas_19(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_19$borrow_a),
					      .borrow_b(adder_subractor_fas_19$borrow_b),
					      .borrow_bin(adder_subractor_fas_19$borrow_bin),
					      .carry_a(adder_subractor_fas_19$carry_a),
					      .carry_b(adder_subractor_fas_19$carry_b),
					      .carry_cin(adder_subractor_fas_19$carry_cin),
					      .difference_a(adder_subractor_fas_19$difference_a),
					      .difference_b(adder_subractor_fas_19$difference_b),
					      .difference_bin(adder_subractor_fas_19$difference_bin),
					      .sum_a(adder_subractor_fas_19$sum_a),
					      .sum_b(adder_subractor_fas_19$sum_b),
					      .sum_cin(adder_subractor_fas_19$sum_cin),
					      .sum(adder_subractor_fas_19$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_19$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_19$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_19$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_2
  mkfullAdderSubractor adder_subractor_fas_2(.CLK(CLK),
					     .RST_N(RST_N),
					     .borrow_a(adder_subractor_fas_2$borrow_a),
					     .borrow_b(adder_subractor_fas_2$borrow_b),
					     .borrow_bin(adder_subractor_fas_2$borrow_bin),
					     .carry_a(adder_subractor_fas_2$carry_a),
					     .carry_b(adder_subractor_fas_2$carry_b),
					     .carry_cin(adder_subractor_fas_2$carry_cin),
					     .difference_a(adder_subractor_fas_2$difference_a),
					     .difference_b(adder_subractor_fas_2$difference_b),
					     .difference_bin(adder_subractor_fas_2$difference_bin),
					     .sum_a(adder_subractor_fas_2$sum_a),
					     .sum_b(adder_subractor_fas_2$sum_b),
					     .sum_cin(adder_subractor_fas_2$sum_cin),
					     .sum(adder_subractor_fas_2$sum),
					     .RDY_sum(),
					     .carry(adder_subractor_fas_2$carry),
					     .RDY_carry(),
					     .difference(adder_subractor_fas_2$difference),
					     .RDY_difference(),
					     .borrow(adder_subractor_fas_2$borrow),
					     .RDY_borrow());

  // submodule adder_subractor_fas_20
  mkfullAdderSubractor adder_subractor_fas_20(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_20$borrow_a),
					      .borrow_b(adder_subractor_fas_20$borrow_b),
					      .borrow_bin(adder_subractor_fas_20$borrow_bin),
					      .carry_a(adder_subractor_fas_20$carry_a),
					      .carry_b(adder_subractor_fas_20$carry_b),
					      .carry_cin(adder_subractor_fas_20$carry_cin),
					      .difference_a(adder_subractor_fas_20$difference_a),
					      .difference_b(adder_subractor_fas_20$difference_b),
					      .difference_bin(adder_subractor_fas_20$difference_bin),
					      .sum_a(adder_subractor_fas_20$sum_a),
					      .sum_b(adder_subractor_fas_20$sum_b),
					      .sum_cin(adder_subractor_fas_20$sum_cin),
					      .sum(adder_subractor_fas_20$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_20$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_20$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_20$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_21
  mkfullAdderSubractor adder_subractor_fas_21(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_21$borrow_a),
					      .borrow_b(adder_subractor_fas_21$borrow_b),
					      .borrow_bin(adder_subractor_fas_21$borrow_bin),
					      .carry_a(adder_subractor_fas_21$carry_a),
					      .carry_b(adder_subractor_fas_21$carry_b),
					      .carry_cin(adder_subractor_fas_21$carry_cin),
					      .difference_a(adder_subractor_fas_21$difference_a),
					      .difference_b(adder_subractor_fas_21$difference_b),
					      .difference_bin(adder_subractor_fas_21$difference_bin),
					      .sum_a(adder_subractor_fas_21$sum_a),
					      .sum_b(adder_subractor_fas_21$sum_b),
					      .sum_cin(adder_subractor_fas_21$sum_cin),
					      .sum(adder_subractor_fas_21$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_21$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_21$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_21$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_22
  mkfullAdderSubractor adder_subractor_fas_22(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_22$borrow_a),
					      .borrow_b(adder_subractor_fas_22$borrow_b),
					      .borrow_bin(adder_subractor_fas_22$borrow_bin),
					      .carry_a(adder_subractor_fas_22$carry_a),
					      .carry_b(adder_subractor_fas_22$carry_b),
					      .carry_cin(adder_subractor_fas_22$carry_cin),
					      .difference_a(adder_subractor_fas_22$difference_a),
					      .difference_b(adder_subractor_fas_22$difference_b),
					      .difference_bin(adder_subractor_fas_22$difference_bin),
					      .sum_a(adder_subractor_fas_22$sum_a),
					      .sum_b(adder_subractor_fas_22$sum_b),
					      .sum_cin(adder_subractor_fas_22$sum_cin),
					      .sum(adder_subractor_fas_22$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_22$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_22$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_22$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_23
  mkfullAdderSubractor adder_subractor_fas_23(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_23$borrow_a),
					      .borrow_b(adder_subractor_fas_23$borrow_b),
					      .borrow_bin(adder_subractor_fas_23$borrow_bin),
					      .carry_a(adder_subractor_fas_23$carry_a),
					      .carry_b(adder_subractor_fas_23$carry_b),
					      .carry_cin(adder_subractor_fas_23$carry_cin),
					      .difference_a(adder_subractor_fas_23$difference_a),
					      .difference_b(adder_subractor_fas_23$difference_b),
					      .difference_bin(adder_subractor_fas_23$difference_bin),
					      .sum_a(adder_subractor_fas_23$sum_a),
					      .sum_b(adder_subractor_fas_23$sum_b),
					      .sum_cin(adder_subractor_fas_23$sum_cin),
					      .sum(adder_subractor_fas_23$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_23$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_23$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_23$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_24
  mkfullAdderSubractor adder_subractor_fas_24(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_24$borrow_a),
					      .borrow_b(adder_subractor_fas_24$borrow_b),
					      .borrow_bin(adder_subractor_fas_24$borrow_bin),
					      .carry_a(adder_subractor_fas_24$carry_a),
					      .carry_b(adder_subractor_fas_24$carry_b),
					      .carry_cin(adder_subractor_fas_24$carry_cin),
					      .difference_a(adder_subractor_fas_24$difference_a),
					      .difference_b(adder_subractor_fas_24$difference_b),
					      .difference_bin(adder_subractor_fas_24$difference_bin),
					      .sum_a(adder_subractor_fas_24$sum_a),
					      .sum_b(adder_subractor_fas_24$sum_b),
					      .sum_cin(adder_subractor_fas_24$sum_cin),
					      .sum(adder_subractor_fas_24$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_24$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_24$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_24$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_25
  mkfullAdderSubractor adder_subractor_fas_25(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_25$borrow_a),
					      .borrow_b(adder_subractor_fas_25$borrow_b),
					      .borrow_bin(adder_subractor_fas_25$borrow_bin),
					      .carry_a(adder_subractor_fas_25$carry_a),
					      .carry_b(adder_subractor_fas_25$carry_b),
					      .carry_cin(adder_subractor_fas_25$carry_cin),
					      .difference_a(adder_subractor_fas_25$difference_a),
					      .difference_b(adder_subractor_fas_25$difference_b),
					      .difference_bin(adder_subractor_fas_25$difference_bin),
					      .sum_a(adder_subractor_fas_25$sum_a),
					      .sum_b(adder_subractor_fas_25$sum_b),
					      .sum_cin(adder_subractor_fas_25$sum_cin),
					      .sum(adder_subractor_fas_25$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_25$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_25$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_25$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_26
  mkfullAdderSubractor adder_subractor_fas_26(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_26$borrow_a),
					      .borrow_b(adder_subractor_fas_26$borrow_b),
					      .borrow_bin(adder_subractor_fas_26$borrow_bin),
					      .carry_a(adder_subractor_fas_26$carry_a),
					      .carry_b(adder_subractor_fas_26$carry_b),
					      .carry_cin(adder_subractor_fas_26$carry_cin),
					      .difference_a(adder_subractor_fas_26$difference_a),
					      .difference_b(adder_subractor_fas_26$difference_b),
					      .difference_bin(adder_subractor_fas_26$difference_bin),
					      .sum_a(adder_subractor_fas_26$sum_a),
					      .sum_b(adder_subractor_fas_26$sum_b),
					      .sum_cin(adder_subractor_fas_26$sum_cin),
					      .sum(adder_subractor_fas_26$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_26$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_26$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_26$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_27
  mkfullAdderSubractor adder_subractor_fas_27(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_27$borrow_a),
					      .borrow_b(adder_subractor_fas_27$borrow_b),
					      .borrow_bin(adder_subractor_fas_27$borrow_bin),
					      .carry_a(adder_subractor_fas_27$carry_a),
					      .carry_b(adder_subractor_fas_27$carry_b),
					      .carry_cin(adder_subractor_fas_27$carry_cin),
					      .difference_a(adder_subractor_fas_27$difference_a),
					      .difference_b(adder_subractor_fas_27$difference_b),
					      .difference_bin(adder_subractor_fas_27$difference_bin),
					      .sum_a(adder_subractor_fas_27$sum_a),
					      .sum_b(adder_subractor_fas_27$sum_b),
					      .sum_cin(adder_subractor_fas_27$sum_cin),
					      .sum(adder_subractor_fas_27$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_27$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_27$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_27$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_28
  mkfullAdderSubractor adder_subractor_fas_28(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_28$borrow_a),
					      .borrow_b(adder_subractor_fas_28$borrow_b),
					      .borrow_bin(adder_subractor_fas_28$borrow_bin),
					      .carry_a(adder_subractor_fas_28$carry_a),
					      .carry_b(adder_subractor_fas_28$carry_b),
					      .carry_cin(adder_subractor_fas_28$carry_cin),
					      .difference_a(adder_subractor_fas_28$difference_a),
					      .difference_b(adder_subractor_fas_28$difference_b),
					      .difference_bin(adder_subractor_fas_28$difference_bin),
					      .sum_a(adder_subractor_fas_28$sum_a),
					      .sum_b(adder_subractor_fas_28$sum_b),
					      .sum_cin(adder_subractor_fas_28$sum_cin),
					      .sum(adder_subractor_fas_28$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_28$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_28$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_28$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_29
  mkfullAdderSubractor adder_subractor_fas_29(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_29$borrow_a),
					      .borrow_b(adder_subractor_fas_29$borrow_b),
					      .borrow_bin(adder_subractor_fas_29$borrow_bin),
					      .carry_a(adder_subractor_fas_29$carry_a),
					      .carry_b(adder_subractor_fas_29$carry_b),
					      .carry_cin(adder_subractor_fas_29$carry_cin),
					      .difference_a(adder_subractor_fas_29$difference_a),
					      .difference_b(adder_subractor_fas_29$difference_b),
					      .difference_bin(adder_subractor_fas_29$difference_bin),
					      .sum_a(adder_subractor_fas_29$sum_a),
					      .sum_b(adder_subractor_fas_29$sum_b),
					      .sum_cin(adder_subractor_fas_29$sum_cin),
					      .sum(adder_subractor_fas_29$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_29$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_29$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_29$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_3
  mkfullAdderSubractor adder_subractor_fas_3(.CLK(CLK),
					     .RST_N(RST_N),
					     .borrow_a(adder_subractor_fas_3$borrow_a),
					     .borrow_b(adder_subractor_fas_3$borrow_b),
					     .borrow_bin(adder_subractor_fas_3$borrow_bin),
					     .carry_a(adder_subractor_fas_3$carry_a),
					     .carry_b(adder_subractor_fas_3$carry_b),
					     .carry_cin(adder_subractor_fas_3$carry_cin),
					     .difference_a(adder_subractor_fas_3$difference_a),
					     .difference_b(adder_subractor_fas_3$difference_b),
					     .difference_bin(adder_subractor_fas_3$difference_bin),
					     .sum_a(adder_subractor_fas_3$sum_a),
					     .sum_b(adder_subractor_fas_3$sum_b),
					     .sum_cin(adder_subractor_fas_3$sum_cin),
					     .sum(adder_subractor_fas_3$sum),
					     .RDY_sum(),
					     .carry(adder_subractor_fas_3$carry),
					     .RDY_carry(),
					     .difference(adder_subractor_fas_3$difference),
					     .RDY_difference(),
					     .borrow(adder_subractor_fas_3$borrow),
					     .RDY_borrow());

  // submodule adder_subractor_fas_30
  mkfullAdderSubractor adder_subractor_fas_30(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_30$borrow_a),
					      .borrow_b(adder_subractor_fas_30$borrow_b),
					      .borrow_bin(adder_subractor_fas_30$borrow_bin),
					      .carry_a(adder_subractor_fas_30$carry_a),
					      .carry_b(adder_subractor_fas_30$carry_b),
					      .carry_cin(adder_subractor_fas_30$carry_cin),
					      .difference_a(adder_subractor_fas_30$difference_a),
					      .difference_b(adder_subractor_fas_30$difference_b),
					      .difference_bin(adder_subractor_fas_30$difference_bin),
					      .sum_a(adder_subractor_fas_30$sum_a),
					      .sum_b(adder_subractor_fas_30$sum_b),
					      .sum_cin(adder_subractor_fas_30$sum_cin),
					      .sum(adder_subractor_fas_30$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_30$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_30$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_30$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_31
  mkfullAdderSubractor adder_subractor_fas_31(.CLK(CLK),
					      .RST_N(RST_N),
					      .borrow_a(adder_subractor_fas_31$borrow_a),
					      .borrow_b(adder_subractor_fas_31$borrow_b),
					      .borrow_bin(adder_subractor_fas_31$borrow_bin),
					      .carry_a(adder_subractor_fas_31$carry_a),
					      .carry_b(adder_subractor_fas_31$carry_b),
					      .carry_cin(adder_subractor_fas_31$carry_cin),
					      .difference_a(adder_subractor_fas_31$difference_a),
					      .difference_b(adder_subractor_fas_31$difference_b),
					      .difference_bin(adder_subractor_fas_31$difference_bin),
					      .sum_a(adder_subractor_fas_31$sum_a),
					      .sum_b(adder_subractor_fas_31$sum_b),
					      .sum_cin(adder_subractor_fas_31$sum_cin),
					      .sum(adder_subractor_fas_31$sum),
					      .RDY_sum(),
					      .carry(adder_subractor_fas_31$carry),
					      .RDY_carry(),
					      .difference(adder_subractor_fas_31$difference),
					      .RDY_difference(),
					      .borrow(adder_subractor_fas_31$borrow),
					      .RDY_borrow());

  // submodule adder_subractor_fas_4
  mkfullAdderSubractor adder_subractor_fas_4(.CLK(CLK),
					     .RST_N(RST_N),
					     .borrow_a(adder_subractor_fas_4$borrow_a),
					     .borrow_b(adder_subractor_fas_4$borrow_b),
					     .borrow_bin(adder_subractor_fas_4$borrow_bin),
					     .carry_a(adder_subractor_fas_4$carry_a),
					     .carry_b(adder_subractor_fas_4$carry_b),
					     .carry_cin(adder_subractor_fas_4$carry_cin),
					     .difference_a(adder_subractor_fas_4$difference_a),
					     .difference_b(adder_subractor_fas_4$difference_b),
					     .difference_bin(adder_subractor_fas_4$difference_bin),
					     .sum_a(adder_subractor_fas_4$sum_a),
					     .sum_b(adder_subractor_fas_4$sum_b),
					     .sum_cin(adder_subractor_fas_4$sum_cin),
					     .sum(adder_subractor_fas_4$sum),
					     .RDY_sum(),
					     .carry(adder_subractor_fas_4$carry),
					     .RDY_carry(),
					     .difference(adder_subractor_fas_4$difference),
					     .RDY_difference(),
					     .borrow(adder_subractor_fas_4$borrow),
					     .RDY_borrow());

  // submodule adder_subractor_fas_5
  mkfullAdderSubractor adder_subractor_fas_5(.CLK(CLK),
					     .RST_N(RST_N),
					     .borrow_a(adder_subractor_fas_5$borrow_a),
					     .borrow_b(adder_subractor_fas_5$borrow_b),
					     .borrow_bin(adder_subractor_fas_5$borrow_bin),
					     .carry_a(adder_subractor_fas_5$carry_a),
					     .carry_b(adder_subractor_fas_5$carry_b),
					     .carry_cin(adder_subractor_fas_5$carry_cin),
					     .difference_a(adder_subractor_fas_5$difference_a),
					     .difference_b(adder_subractor_fas_5$difference_b),
					     .difference_bin(adder_subractor_fas_5$difference_bin),
					     .sum_a(adder_subractor_fas_5$sum_a),
					     .sum_b(adder_subractor_fas_5$sum_b),
					     .sum_cin(adder_subractor_fas_5$sum_cin),
					     .sum(adder_subractor_fas_5$sum),
					     .RDY_sum(),
					     .carry(adder_subractor_fas_5$carry),
					     .RDY_carry(),
					     .difference(adder_subractor_fas_5$difference),
					     .RDY_difference(),
					     .borrow(adder_subractor_fas_5$borrow),
					     .RDY_borrow());

  // submodule adder_subractor_fas_6
  mkfullAdderSubractor adder_subractor_fas_6(.CLK(CLK),
					     .RST_N(RST_N),
					     .borrow_a(adder_subractor_fas_6$borrow_a),
					     .borrow_b(adder_subractor_fas_6$borrow_b),
					     .borrow_bin(adder_subractor_fas_6$borrow_bin),
					     .carry_a(adder_subractor_fas_6$carry_a),
					     .carry_b(adder_subractor_fas_6$carry_b),
					     .carry_cin(adder_subractor_fas_6$carry_cin),
					     .difference_a(adder_subractor_fas_6$difference_a),
					     .difference_b(adder_subractor_fas_6$difference_b),
					     .difference_bin(adder_subractor_fas_6$difference_bin),
					     .sum_a(adder_subractor_fas_6$sum_a),
					     .sum_b(adder_subractor_fas_6$sum_b),
					     .sum_cin(adder_subractor_fas_6$sum_cin),
					     .sum(adder_subractor_fas_6$sum),
					     .RDY_sum(),
					     .carry(adder_subractor_fas_6$carry),
					     .RDY_carry(),
					     .difference(adder_subractor_fas_6$difference),
					     .RDY_difference(),
					     .borrow(adder_subractor_fas_6$borrow),
					     .RDY_borrow());

  // submodule adder_subractor_fas_7
  mkfullAdderSubractor adder_subractor_fas_7(.CLK(CLK),
					     .RST_N(RST_N),
					     .borrow_a(adder_subractor_fas_7$borrow_a),
					     .borrow_b(adder_subractor_fas_7$borrow_b),
					     .borrow_bin(adder_subractor_fas_7$borrow_bin),
					     .carry_a(adder_subractor_fas_7$carry_a),
					     .carry_b(adder_subractor_fas_7$carry_b),
					     .carry_cin(adder_subractor_fas_7$carry_cin),
					     .difference_a(adder_subractor_fas_7$difference_a),
					     .difference_b(adder_subractor_fas_7$difference_b),
					     .difference_bin(adder_subractor_fas_7$difference_bin),
					     .sum_a(adder_subractor_fas_7$sum_a),
					     .sum_b(adder_subractor_fas_7$sum_b),
					     .sum_cin(adder_subractor_fas_7$sum_cin),
					     .sum(adder_subractor_fas_7$sum),
					     .RDY_sum(),
					     .carry(adder_subractor_fas_7$carry),
					     .RDY_carry(),
					     .difference(adder_subractor_fas_7$difference),
					     .RDY_difference(),
					     .borrow(adder_subractor_fas_7$borrow),
					     .RDY_borrow());

  // submodule adder_subractor_fas_8
  mkfullAdderSubractor adder_subractor_fas_8(.CLK(CLK),
					     .RST_N(RST_N),
					     .borrow_a(adder_subractor_fas_8$borrow_a),
					     .borrow_b(adder_subractor_fas_8$borrow_b),
					     .borrow_bin(adder_subractor_fas_8$borrow_bin),
					     .carry_a(adder_subractor_fas_8$carry_a),
					     .carry_b(adder_subractor_fas_8$carry_b),
					     .carry_cin(adder_subractor_fas_8$carry_cin),
					     .difference_a(adder_subractor_fas_8$difference_a),
					     .difference_b(adder_subractor_fas_8$difference_b),
					     .difference_bin(adder_subractor_fas_8$difference_bin),
					     .sum_a(adder_subractor_fas_8$sum_a),
					     .sum_b(adder_subractor_fas_8$sum_b),
					     .sum_cin(adder_subractor_fas_8$sum_cin),
					     .sum(adder_subractor_fas_8$sum),
					     .RDY_sum(),
					     .carry(adder_subractor_fas_8$carry),
					     .RDY_carry(),
					     .difference(adder_subractor_fas_8$difference),
					     .RDY_difference(),
					     .borrow(adder_subractor_fas_8$borrow),
					     .RDY_borrow());

  // submodule adder_subractor_fas_9
  mkfullAdderSubractor adder_subractor_fas_9(.CLK(CLK),
					     .RST_N(RST_N),
					     .borrow_a(adder_subractor_fas_9$borrow_a),
					     .borrow_b(adder_subractor_fas_9$borrow_b),
					     .borrow_bin(adder_subractor_fas_9$borrow_bin),
					     .carry_a(adder_subractor_fas_9$carry_a),
					     .carry_b(adder_subractor_fas_9$carry_b),
					     .carry_cin(adder_subractor_fas_9$carry_cin),
					     .difference_a(adder_subractor_fas_9$difference_a),
					     .difference_b(adder_subractor_fas_9$difference_b),
					     .difference_bin(adder_subractor_fas_9$difference_bin),
					     .sum_a(adder_subractor_fas_9$sum_a),
					     .sum_b(adder_subractor_fas_9$sum_b),
					     .sum_cin(adder_subractor_fas_9$sum_cin),
					     .sum(adder_subractor_fas_9$sum),
					     .RDY_sum(),
					     .carry(adder_subractor_fas_9$carry),
					     .RDY_carry(),
					     .difference(adder_subractor_fas_9$difference),
					     .RDY_difference(),
					     .borrow(adder_subractor_fas_9$borrow),
					     .RDY_borrow());

  // submodule multiplier
  mkMultiplier multiplier(.CLK(CLK),
			  .RST_N(RST_N),
			  .inp_a(multiplier$inp_a),
			  .inp_b(multiplier$inp_b),
			  .EN_inp(multiplier$EN_inp),
			  .EN_op(multiplier$EN_op),
			  .RDY_inp(multiplier$RDY_inp),
			  .op(multiplier$op),
			  .RDY_op(multiplier$RDY_op));

  // rule RL_rl_mul
  assign CAN_FIRE_RL_rl_mul = multiplier$RDY_inp && got_a && got_b ;
  assign WILL_FIRE_RL_rl_mul = CAN_FIRE_RL_rl_mul ;

  // rule RL_rl_add
  assign CAN_FIRE_RL_rl_add = MUX_adder_subractor_got_ip$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_add = MUX_adder_subractor_got_ip$write_1__SEL_2 ;

  // rule RL_adder_subractor_rl_sum
  assign CAN_FIRE_RL_adder_subractor_rl_sum = adder_subractor_got_ip ;
  assign WILL_FIRE_RL_adder_subractor_rl_sum = adder_subractor_got_ip ;

  // inputs to muxes for submodule ports
  assign MUX_adder_subractor_got_ip$write_1__SEL_2 =
	     !adder_subractor_got_ip && multiplier$RDY_op ;

  // register adder_subractor_got_ip
  assign adder_subractor_got_ip$D_IN = !EN_mac_op ;
  assign adder_subractor_got_ip$EN = EN_mac_op || WILL_FIRE_RL_rl_add ;

  // register adder_subractor_rg_ip
  assign adder_subractor_rg_ip$D_IN = { multiplier$op, rg_c } ;
  assign adder_subractor_rg_ip$EN =
	     MUX_adder_subractor_got_ip$write_1__SEL_2 ;

  // register adder_subractor_rg_sub
  assign adder_subractor_rg_sub$D_IN = 1'd0 ;
  assign adder_subractor_rg_sub$EN =
	     MUX_adder_subractor_got_ip$write_1__SEL_2 ;

  // register got_a
  assign got_a$D_IN = EN_a ;
  assign got_a$EN = EN_mac_op || EN_a ;

  // register got_b
  assign got_b$D_IN = EN_b ;
  assign got_b$EN = EN_mac_op || EN_b ;

  // register got_c
  assign got_c$D_IN = EN_c ;
  assign got_c$EN = EN_mac_op || EN_c ;

  // register rg_a
  assign rg_a$D_IN = a_x ;
  assign rg_a$EN = EN_a ;

  // register rg_b
  assign rg_b$D_IN = b_x ;
  assign rg_b$EN = EN_b ;

  // register rg_c
  assign rg_c$D_IN = c_x ;
  assign rg_c$EN = EN_c ;

  // submodule adder_subractor_fas_0
  assign adder_subractor_fas_0$borrow_a = adder_subractor_rg_ip[32] ;
  assign adder_subractor_fas_0$borrow_b = adder_subractor_rg_ip[0] ;
  assign adder_subractor_fas_0$borrow_bin = adder_subractor_rg_sub ;
  assign adder_subractor_fas_0$carry_a = adder_subractor_rg_ip[32] ;
  assign adder_subractor_fas_0$carry_b = adder_subractor_rg_ip[0] ;
  assign adder_subractor_fas_0$carry_cin = adder_subractor_rg_sub ;
  assign adder_subractor_fas_0$difference_a = adder_subractor_rg_ip[32] ;
  assign adder_subractor_fas_0$difference_b = adder_subractor_rg_ip[0] ;
  assign adder_subractor_fas_0$difference_bin = adder_subractor_rg_sub ;
  assign adder_subractor_fas_0$sum_a = adder_subractor_rg_ip[32] ;
  assign adder_subractor_fas_0$sum_b = adder_subractor_rg_ip[0] ;
  assign adder_subractor_fas_0$sum_cin = adder_subractor_rg_sub ;

  // submodule adder_subractor_fas_1
  assign adder_subractor_fas_1$borrow_a = adder_subractor_rg_ip[33] ;
  assign adder_subractor_fas_1$borrow_b = adder_subractor_rg_ip[1] ;
  assign adder_subractor_fas_1$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_0$borrow :
	       adder_subractor_fas_0$carry ;
  assign adder_subractor_fas_1$carry_a = adder_subractor_rg_ip[33] ;
  assign adder_subractor_fas_1$carry_b = adder_subractor_rg_ip[1] ;
  assign adder_subractor_fas_1$carry_cin = adder_subractor_fas_1$borrow_bin ;
  assign adder_subractor_fas_1$difference_a = adder_subractor_rg_ip[33] ;
  assign adder_subractor_fas_1$difference_b = adder_subractor_rg_ip[1] ;
  assign adder_subractor_fas_1$difference_bin =
	     adder_subractor_fas_1$borrow_bin ;
  assign adder_subractor_fas_1$sum_a = adder_subractor_rg_ip[33] ;
  assign adder_subractor_fas_1$sum_b = adder_subractor_rg_ip[1] ;
  assign adder_subractor_fas_1$sum_cin = adder_subractor_fas_1$borrow_bin ;

  // submodule adder_subractor_fas_10
  assign adder_subractor_fas_10$borrow_a = adder_subractor_rg_ip[42] ;
  assign adder_subractor_fas_10$borrow_b = adder_subractor_rg_ip[10] ;
  assign adder_subractor_fas_10$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_9$borrow :
	       adder_subractor_fas_9$carry ;
  assign adder_subractor_fas_10$carry_a = adder_subractor_rg_ip[42] ;
  assign adder_subractor_fas_10$carry_b = adder_subractor_rg_ip[10] ;
  assign adder_subractor_fas_10$carry_cin =
	     adder_subractor_fas_10$borrow_bin ;
  assign adder_subractor_fas_10$difference_a = adder_subractor_rg_ip[42] ;
  assign adder_subractor_fas_10$difference_b = adder_subractor_rg_ip[10] ;
  assign adder_subractor_fas_10$difference_bin =
	     adder_subractor_fas_10$borrow_bin ;
  assign adder_subractor_fas_10$sum_a = adder_subractor_rg_ip[42] ;
  assign adder_subractor_fas_10$sum_b = adder_subractor_rg_ip[10] ;
  assign adder_subractor_fas_10$sum_cin = adder_subractor_fas_10$borrow_bin ;

  // submodule adder_subractor_fas_11
  assign adder_subractor_fas_11$borrow_a = adder_subractor_rg_ip[43] ;
  assign adder_subractor_fas_11$borrow_b = adder_subractor_rg_ip[11] ;
  assign adder_subractor_fas_11$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_10$borrow :
	       adder_subractor_fas_10$carry ;
  assign adder_subractor_fas_11$carry_a = adder_subractor_rg_ip[43] ;
  assign adder_subractor_fas_11$carry_b = adder_subractor_rg_ip[11] ;
  assign adder_subractor_fas_11$carry_cin =
	     adder_subractor_fas_11$borrow_bin ;
  assign adder_subractor_fas_11$difference_a = adder_subractor_rg_ip[43] ;
  assign adder_subractor_fas_11$difference_b = adder_subractor_rg_ip[11] ;
  assign adder_subractor_fas_11$difference_bin =
	     adder_subractor_fas_11$borrow_bin ;
  assign adder_subractor_fas_11$sum_a = adder_subractor_rg_ip[43] ;
  assign adder_subractor_fas_11$sum_b = adder_subractor_rg_ip[11] ;
  assign adder_subractor_fas_11$sum_cin = adder_subractor_fas_11$borrow_bin ;

  // submodule adder_subractor_fas_12
  assign adder_subractor_fas_12$borrow_a = adder_subractor_rg_ip[44] ;
  assign adder_subractor_fas_12$borrow_b = adder_subractor_rg_ip[12] ;
  assign adder_subractor_fas_12$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_11$borrow :
	       adder_subractor_fas_11$carry ;
  assign adder_subractor_fas_12$carry_a = adder_subractor_rg_ip[44] ;
  assign adder_subractor_fas_12$carry_b = adder_subractor_rg_ip[12] ;
  assign adder_subractor_fas_12$carry_cin =
	     adder_subractor_fas_12$borrow_bin ;
  assign adder_subractor_fas_12$difference_a = adder_subractor_rg_ip[44] ;
  assign adder_subractor_fas_12$difference_b = adder_subractor_rg_ip[12] ;
  assign adder_subractor_fas_12$difference_bin =
	     adder_subractor_fas_12$borrow_bin ;
  assign adder_subractor_fas_12$sum_a = adder_subractor_rg_ip[44] ;
  assign adder_subractor_fas_12$sum_b = adder_subractor_rg_ip[12] ;
  assign adder_subractor_fas_12$sum_cin = adder_subractor_fas_12$borrow_bin ;

  // submodule adder_subractor_fas_13
  assign adder_subractor_fas_13$borrow_a = adder_subractor_rg_ip[45] ;
  assign adder_subractor_fas_13$borrow_b = adder_subractor_rg_ip[13] ;
  assign adder_subractor_fas_13$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_12$borrow :
	       adder_subractor_fas_12$carry ;
  assign adder_subractor_fas_13$carry_a = adder_subractor_rg_ip[45] ;
  assign adder_subractor_fas_13$carry_b = adder_subractor_rg_ip[13] ;
  assign adder_subractor_fas_13$carry_cin =
	     adder_subractor_fas_13$borrow_bin ;
  assign adder_subractor_fas_13$difference_a = adder_subractor_rg_ip[45] ;
  assign adder_subractor_fas_13$difference_b = adder_subractor_rg_ip[13] ;
  assign adder_subractor_fas_13$difference_bin =
	     adder_subractor_fas_13$borrow_bin ;
  assign adder_subractor_fas_13$sum_a = adder_subractor_rg_ip[45] ;
  assign adder_subractor_fas_13$sum_b = adder_subractor_rg_ip[13] ;
  assign adder_subractor_fas_13$sum_cin = adder_subractor_fas_13$borrow_bin ;

  // submodule adder_subractor_fas_14
  assign adder_subractor_fas_14$borrow_a = adder_subractor_rg_ip[46] ;
  assign adder_subractor_fas_14$borrow_b = adder_subractor_rg_ip[14] ;
  assign adder_subractor_fas_14$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_13$borrow :
	       adder_subractor_fas_13$carry ;
  assign adder_subractor_fas_14$carry_a = adder_subractor_rg_ip[46] ;
  assign adder_subractor_fas_14$carry_b = adder_subractor_rg_ip[14] ;
  assign adder_subractor_fas_14$carry_cin =
	     adder_subractor_fas_14$borrow_bin ;
  assign adder_subractor_fas_14$difference_a = adder_subractor_rg_ip[46] ;
  assign adder_subractor_fas_14$difference_b = adder_subractor_rg_ip[14] ;
  assign adder_subractor_fas_14$difference_bin =
	     adder_subractor_fas_14$borrow_bin ;
  assign adder_subractor_fas_14$sum_a = adder_subractor_rg_ip[46] ;
  assign adder_subractor_fas_14$sum_b = adder_subractor_rg_ip[14] ;
  assign adder_subractor_fas_14$sum_cin = adder_subractor_fas_14$borrow_bin ;

  // submodule adder_subractor_fas_15
  assign adder_subractor_fas_15$borrow_a = adder_subractor_rg_ip[47] ;
  assign adder_subractor_fas_15$borrow_b = adder_subractor_rg_ip[15] ;
  assign adder_subractor_fas_15$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_14$borrow :
	       adder_subractor_fas_14$carry ;
  assign adder_subractor_fas_15$carry_a = adder_subractor_rg_ip[47] ;
  assign adder_subractor_fas_15$carry_b = adder_subractor_rg_ip[15] ;
  assign adder_subractor_fas_15$carry_cin =
	     adder_subractor_fas_15$borrow_bin ;
  assign adder_subractor_fas_15$difference_a = adder_subractor_rg_ip[47] ;
  assign adder_subractor_fas_15$difference_b = adder_subractor_rg_ip[15] ;
  assign adder_subractor_fas_15$difference_bin =
	     adder_subractor_fas_15$borrow_bin ;
  assign adder_subractor_fas_15$sum_a = adder_subractor_rg_ip[47] ;
  assign adder_subractor_fas_15$sum_b = adder_subractor_rg_ip[15] ;
  assign adder_subractor_fas_15$sum_cin = adder_subractor_fas_15$borrow_bin ;

  // submodule adder_subractor_fas_16
  assign adder_subractor_fas_16$borrow_a = adder_subractor_rg_ip[48] ;
  assign adder_subractor_fas_16$borrow_b = adder_subractor_rg_ip[16] ;
  assign adder_subractor_fas_16$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_15$borrow :
	       adder_subractor_fas_15$carry ;
  assign adder_subractor_fas_16$carry_a = adder_subractor_rg_ip[48] ;
  assign adder_subractor_fas_16$carry_b = adder_subractor_rg_ip[16] ;
  assign adder_subractor_fas_16$carry_cin =
	     adder_subractor_fas_16$borrow_bin ;
  assign adder_subractor_fas_16$difference_a = adder_subractor_rg_ip[48] ;
  assign adder_subractor_fas_16$difference_b = adder_subractor_rg_ip[16] ;
  assign adder_subractor_fas_16$difference_bin =
	     adder_subractor_fas_16$borrow_bin ;
  assign adder_subractor_fas_16$sum_a = adder_subractor_rg_ip[48] ;
  assign adder_subractor_fas_16$sum_b = adder_subractor_rg_ip[16] ;
  assign adder_subractor_fas_16$sum_cin = adder_subractor_fas_16$borrow_bin ;

  // submodule adder_subractor_fas_17
  assign adder_subractor_fas_17$borrow_a = adder_subractor_rg_ip[49] ;
  assign adder_subractor_fas_17$borrow_b = adder_subractor_rg_ip[17] ;
  assign adder_subractor_fas_17$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_16$borrow :
	       adder_subractor_fas_16$carry ;
  assign adder_subractor_fas_17$carry_a = adder_subractor_rg_ip[49] ;
  assign adder_subractor_fas_17$carry_b = adder_subractor_rg_ip[17] ;
  assign adder_subractor_fas_17$carry_cin =
	     adder_subractor_fas_17$borrow_bin ;
  assign adder_subractor_fas_17$difference_a = adder_subractor_rg_ip[49] ;
  assign adder_subractor_fas_17$difference_b = adder_subractor_rg_ip[17] ;
  assign adder_subractor_fas_17$difference_bin =
	     adder_subractor_fas_17$borrow_bin ;
  assign adder_subractor_fas_17$sum_a = adder_subractor_rg_ip[49] ;
  assign adder_subractor_fas_17$sum_b = adder_subractor_rg_ip[17] ;
  assign adder_subractor_fas_17$sum_cin = adder_subractor_fas_17$borrow_bin ;

  // submodule adder_subractor_fas_18
  assign adder_subractor_fas_18$borrow_a = adder_subractor_rg_ip[50] ;
  assign adder_subractor_fas_18$borrow_b = adder_subractor_rg_ip[18] ;
  assign adder_subractor_fas_18$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_17$borrow :
	       adder_subractor_fas_17$carry ;
  assign adder_subractor_fas_18$carry_a = adder_subractor_rg_ip[50] ;
  assign adder_subractor_fas_18$carry_b = adder_subractor_rg_ip[18] ;
  assign adder_subractor_fas_18$carry_cin =
	     adder_subractor_fas_18$borrow_bin ;
  assign adder_subractor_fas_18$difference_a = adder_subractor_rg_ip[50] ;
  assign adder_subractor_fas_18$difference_b = adder_subractor_rg_ip[18] ;
  assign adder_subractor_fas_18$difference_bin =
	     adder_subractor_fas_18$borrow_bin ;
  assign adder_subractor_fas_18$sum_a = adder_subractor_rg_ip[50] ;
  assign adder_subractor_fas_18$sum_b = adder_subractor_rg_ip[18] ;
  assign adder_subractor_fas_18$sum_cin = adder_subractor_fas_18$borrow_bin ;

  // submodule adder_subractor_fas_19
  assign adder_subractor_fas_19$borrow_a = adder_subractor_rg_ip[51] ;
  assign adder_subractor_fas_19$borrow_b = adder_subractor_rg_ip[19] ;
  assign adder_subractor_fas_19$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_18$borrow :
	       adder_subractor_fas_18$carry ;
  assign adder_subractor_fas_19$carry_a = adder_subractor_rg_ip[51] ;
  assign adder_subractor_fas_19$carry_b = adder_subractor_rg_ip[19] ;
  assign adder_subractor_fas_19$carry_cin =
	     adder_subractor_fas_19$borrow_bin ;
  assign adder_subractor_fas_19$difference_a = adder_subractor_rg_ip[51] ;
  assign adder_subractor_fas_19$difference_b = adder_subractor_rg_ip[19] ;
  assign adder_subractor_fas_19$difference_bin =
	     adder_subractor_fas_19$borrow_bin ;
  assign adder_subractor_fas_19$sum_a = adder_subractor_rg_ip[51] ;
  assign adder_subractor_fas_19$sum_b = adder_subractor_rg_ip[19] ;
  assign adder_subractor_fas_19$sum_cin = adder_subractor_fas_19$borrow_bin ;

  // submodule adder_subractor_fas_2
  assign adder_subractor_fas_2$borrow_a = adder_subractor_rg_ip[34] ;
  assign adder_subractor_fas_2$borrow_b = adder_subractor_rg_ip[2] ;
  assign adder_subractor_fas_2$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_1$borrow :
	       adder_subractor_fas_1$carry ;
  assign adder_subractor_fas_2$carry_a = adder_subractor_rg_ip[34] ;
  assign adder_subractor_fas_2$carry_b = adder_subractor_rg_ip[2] ;
  assign adder_subractor_fas_2$carry_cin = adder_subractor_fas_2$borrow_bin ;
  assign adder_subractor_fas_2$difference_a = adder_subractor_rg_ip[34] ;
  assign adder_subractor_fas_2$difference_b = adder_subractor_rg_ip[2] ;
  assign adder_subractor_fas_2$difference_bin =
	     adder_subractor_fas_2$borrow_bin ;
  assign adder_subractor_fas_2$sum_a = adder_subractor_rg_ip[34] ;
  assign adder_subractor_fas_2$sum_b = adder_subractor_rg_ip[2] ;
  assign adder_subractor_fas_2$sum_cin = adder_subractor_fas_2$borrow_bin ;

  // submodule adder_subractor_fas_20
  assign adder_subractor_fas_20$borrow_a = adder_subractor_rg_ip[52] ;
  assign adder_subractor_fas_20$borrow_b = adder_subractor_rg_ip[20] ;
  assign adder_subractor_fas_20$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_19$borrow :
	       adder_subractor_fas_19$carry ;
  assign adder_subractor_fas_20$carry_a = adder_subractor_rg_ip[52] ;
  assign adder_subractor_fas_20$carry_b = adder_subractor_rg_ip[20] ;
  assign adder_subractor_fas_20$carry_cin =
	     adder_subractor_fas_20$borrow_bin ;
  assign adder_subractor_fas_20$difference_a = adder_subractor_rg_ip[52] ;
  assign adder_subractor_fas_20$difference_b = adder_subractor_rg_ip[20] ;
  assign adder_subractor_fas_20$difference_bin =
	     adder_subractor_fas_20$borrow_bin ;
  assign adder_subractor_fas_20$sum_a = adder_subractor_rg_ip[52] ;
  assign adder_subractor_fas_20$sum_b = adder_subractor_rg_ip[20] ;
  assign adder_subractor_fas_20$sum_cin = adder_subractor_fas_20$borrow_bin ;

  // submodule adder_subractor_fas_21
  assign adder_subractor_fas_21$borrow_a = adder_subractor_rg_ip[53] ;
  assign adder_subractor_fas_21$borrow_b = adder_subractor_rg_ip[21] ;
  assign adder_subractor_fas_21$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_20$borrow :
	       adder_subractor_fas_20$carry ;
  assign adder_subractor_fas_21$carry_a = adder_subractor_rg_ip[53] ;
  assign adder_subractor_fas_21$carry_b = adder_subractor_rg_ip[21] ;
  assign adder_subractor_fas_21$carry_cin =
	     adder_subractor_fas_21$borrow_bin ;
  assign adder_subractor_fas_21$difference_a = adder_subractor_rg_ip[53] ;
  assign adder_subractor_fas_21$difference_b = adder_subractor_rg_ip[21] ;
  assign adder_subractor_fas_21$difference_bin =
	     adder_subractor_fas_21$borrow_bin ;
  assign adder_subractor_fas_21$sum_a = adder_subractor_rg_ip[53] ;
  assign adder_subractor_fas_21$sum_b = adder_subractor_rg_ip[21] ;
  assign adder_subractor_fas_21$sum_cin = adder_subractor_fas_21$borrow_bin ;

  // submodule adder_subractor_fas_22
  assign adder_subractor_fas_22$borrow_a = adder_subractor_rg_ip[54] ;
  assign adder_subractor_fas_22$borrow_b = adder_subractor_rg_ip[22] ;
  assign adder_subractor_fas_22$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_21$borrow :
	       adder_subractor_fas_21$carry ;
  assign adder_subractor_fas_22$carry_a = adder_subractor_rg_ip[54] ;
  assign adder_subractor_fas_22$carry_b = adder_subractor_rg_ip[22] ;
  assign adder_subractor_fas_22$carry_cin =
	     adder_subractor_fas_22$borrow_bin ;
  assign adder_subractor_fas_22$difference_a = adder_subractor_rg_ip[54] ;
  assign adder_subractor_fas_22$difference_b = adder_subractor_rg_ip[22] ;
  assign adder_subractor_fas_22$difference_bin =
	     adder_subractor_fas_22$borrow_bin ;
  assign adder_subractor_fas_22$sum_a = adder_subractor_rg_ip[54] ;
  assign adder_subractor_fas_22$sum_b = adder_subractor_rg_ip[22] ;
  assign adder_subractor_fas_22$sum_cin = adder_subractor_fas_22$borrow_bin ;

  // submodule adder_subractor_fas_23
  assign adder_subractor_fas_23$borrow_a = adder_subractor_rg_ip[55] ;
  assign adder_subractor_fas_23$borrow_b = adder_subractor_rg_ip[23] ;
  assign adder_subractor_fas_23$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_22$borrow :
	       adder_subractor_fas_22$carry ;
  assign adder_subractor_fas_23$carry_a = adder_subractor_rg_ip[55] ;
  assign adder_subractor_fas_23$carry_b = adder_subractor_rg_ip[23] ;
  assign adder_subractor_fas_23$carry_cin =
	     adder_subractor_fas_23$borrow_bin ;
  assign adder_subractor_fas_23$difference_a = adder_subractor_rg_ip[55] ;
  assign adder_subractor_fas_23$difference_b = adder_subractor_rg_ip[23] ;
  assign adder_subractor_fas_23$difference_bin =
	     adder_subractor_fas_23$borrow_bin ;
  assign adder_subractor_fas_23$sum_a = adder_subractor_rg_ip[55] ;
  assign adder_subractor_fas_23$sum_b = adder_subractor_rg_ip[23] ;
  assign adder_subractor_fas_23$sum_cin = adder_subractor_fas_23$borrow_bin ;

  // submodule adder_subractor_fas_24
  assign adder_subractor_fas_24$borrow_a = adder_subractor_rg_ip[56] ;
  assign adder_subractor_fas_24$borrow_b = adder_subractor_rg_ip[24] ;
  assign adder_subractor_fas_24$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_23$borrow :
	       adder_subractor_fas_23$carry ;
  assign adder_subractor_fas_24$carry_a = adder_subractor_rg_ip[56] ;
  assign adder_subractor_fas_24$carry_b = adder_subractor_rg_ip[24] ;
  assign adder_subractor_fas_24$carry_cin =
	     adder_subractor_fas_24$borrow_bin ;
  assign adder_subractor_fas_24$difference_a = adder_subractor_rg_ip[56] ;
  assign adder_subractor_fas_24$difference_b = adder_subractor_rg_ip[24] ;
  assign adder_subractor_fas_24$difference_bin =
	     adder_subractor_fas_24$borrow_bin ;
  assign adder_subractor_fas_24$sum_a = adder_subractor_rg_ip[56] ;
  assign adder_subractor_fas_24$sum_b = adder_subractor_rg_ip[24] ;
  assign adder_subractor_fas_24$sum_cin = adder_subractor_fas_24$borrow_bin ;

  // submodule adder_subractor_fas_25
  assign adder_subractor_fas_25$borrow_a = adder_subractor_rg_ip[57] ;
  assign adder_subractor_fas_25$borrow_b = adder_subractor_rg_ip[25] ;
  assign adder_subractor_fas_25$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_24$borrow :
	       adder_subractor_fas_24$carry ;
  assign adder_subractor_fas_25$carry_a = adder_subractor_rg_ip[57] ;
  assign adder_subractor_fas_25$carry_b = adder_subractor_rg_ip[25] ;
  assign adder_subractor_fas_25$carry_cin =
	     adder_subractor_fas_25$borrow_bin ;
  assign adder_subractor_fas_25$difference_a = adder_subractor_rg_ip[57] ;
  assign adder_subractor_fas_25$difference_b = adder_subractor_rg_ip[25] ;
  assign adder_subractor_fas_25$difference_bin =
	     adder_subractor_fas_25$borrow_bin ;
  assign adder_subractor_fas_25$sum_a = adder_subractor_rg_ip[57] ;
  assign adder_subractor_fas_25$sum_b = adder_subractor_rg_ip[25] ;
  assign adder_subractor_fas_25$sum_cin = adder_subractor_fas_25$borrow_bin ;

  // submodule adder_subractor_fas_26
  assign adder_subractor_fas_26$borrow_a = adder_subractor_rg_ip[58] ;
  assign adder_subractor_fas_26$borrow_b = adder_subractor_rg_ip[26] ;
  assign adder_subractor_fas_26$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_25$borrow :
	       adder_subractor_fas_25$carry ;
  assign adder_subractor_fas_26$carry_a = adder_subractor_rg_ip[58] ;
  assign adder_subractor_fas_26$carry_b = adder_subractor_rg_ip[26] ;
  assign adder_subractor_fas_26$carry_cin =
	     adder_subractor_fas_26$borrow_bin ;
  assign adder_subractor_fas_26$difference_a = adder_subractor_rg_ip[58] ;
  assign adder_subractor_fas_26$difference_b = adder_subractor_rg_ip[26] ;
  assign adder_subractor_fas_26$difference_bin =
	     adder_subractor_fas_26$borrow_bin ;
  assign adder_subractor_fas_26$sum_a = adder_subractor_rg_ip[58] ;
  assign adder_subractor_fas_26$sum_b = adder_subractor_rg_ip[26] ;
  assign adder_subractor_fas_26$sum_cin = adder_subractor_fas_26$borrow_bin ;

  // submodule adder_subractor_fas_27
  assign adder_subractor_fas_27$borrow_a = adder_subractor_rg_ip[59] ;
  assign adder_subractor_fas_27$borrow_b = adder_subractor_rg_ip[27] ;
  assign adder_subractor_fas_27$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_26$borrow :
	       adder_subractor_fas_26$carry ;
  assign adder_subractor_fas_27$carry_a = adder_subractor_rg_ip[59] ;
  assign adder_subractor_fas_27$carry_b = adder_subractor_rg_ip[27] ;
  assign adder_subractor_fas_27$carry_cin =
	     adder_subractor_fas_27$borrow_bin ;
  assign adder_subractor_fas_27$difference_a = adder_subractor_rg_ip[59] ;
  assign adder_subractor_fas_27$difference_b = adder_subractor_rg_ip[27] ;
  assign adder_subractor_fas_27$difference_bin =
	     adder_subractor_fas_27$borrow_bin ;
  assign adder_subractor_fas_27$sum_a = adder_subractor_rg_ip[59] ;
  assign adder_subractor_fas_27$sum_b = adder_subractor_rg_ip[27] ;
  assign adder_subractor_fas_27$sum_cin = adder_subractor_fas_27$borrow_bin ;

  // submodule adder_subractor_fas_28
  assign adder_subractor_fas_28$borrow_a = adder_subractor_rg_ip[60] ;
  assign adder_subractor_fas_28$borrow_b = adder_subractor_rg_ip[28] ;
  assign adder_subractor_fas_28$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_27$borrow :
	       adder_subractor_fas_27$carry ;
  assign adder_subractor_fas_28$carry_a = adder_subractor_rg_ip[60] ;
  assign adder_subractor_fas_28$carry_b = adder_subractor_rg_ip[28] ;
  assign adder_subractor_fas_28$carry_cin =
	     adder_subractor_fas_28$borrow_bin ;
  assign adder_subractor_fas_28$difference_a = adder_subractor_rg_ip[60] ;
  assign adder_subractor_fas_28$difference_b = adder_subractor_rg_ip[28] ;
  assign adder_subractor_fas_28$difference_bin =
	     adder_subractor_fas_28$borrow_bin ;
  assign adder_subractor_fas_28$sum_a = adder_subractor_rg_ip[60] ;
  assign adder_subractor_fas_28$sum_b = adder_subractor_rg_ip[28] ;
  assign adder_subractor_fas_28$sum_cin = adder_subractor_fas_28$borrow_bin ;

  // submodule adder_subractor_fas_29
  assign adder_subractor_fas_29$borrow_a = adder_subractor_rg_ip[61] ;
  assign adder_subractor_fas_29$borrow_b = adder_subractor_rg_ip[29] ;
  assign adder_subractor_fas_29$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_28$borrow :
	       adder_subractor_fas_28$carry ;
  assign adder_subractor_fas_29$carry_a = adder_subractor_rg_ip[61] ;
  assign adder_subractor_fas_29$carry_b = adder_subractor_rg_ip[29] ;
  assign adder_subractor_fas_29$carry_cin =
	     adder_subractor_fas_29$borrow_bin ;
  assign adder_subractor_fas_29$difference_a = adder_subractor_rg_ip[61] ;
  assign adder_subractor_fas_29$difference_b = adder_subractor_rg_ip[29] ;
  assign adder_subractor_fas_29$difference_bin =
	     adder_subractor_fas_29$borrow_bin ;
  assign adder_subractor_fas_29$sum_a = adder_subractor_rg_ip[61] ;
  assign adder_subractor_fas_29$sum_b = adder_subractor_rg_ip[29] ;
  assign adder_subractor_fas_29$sum_cin = adder_subractor_fas_29$borrow_bin ;

  // submodule adder_subractor_fas_3
  assign adder_subractor_fas_3$borrow_a = adder_subractor_rg_ip[35] ;
  assign adder_subractor_fas_3$borrow_b = adder_subractor_rg_ip[3] ;
  assign adder_subractor_fas_3$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_2$borrow :
	       adder_subractor_fas_2$carry ;
  assign adder_subractor_fas_3$carry_a = adder_subractor_rg_ip[35] ;
  assign adder_subractor_fas_3$carry_b = adder_subractor_rg_ip[3] ;
  assign adder_subractor_fas_3$carry_cin = adder_subractor_fas_3$borrow_bin ;
  assign adder_subractor_fas_3$difference_a = adder_subractor_rg_ip[35] ;
  assign adder_subractor_fas_3$difference_b = adder_subractor_rg_ip[3] ;
  assign adder_subractor_fas_3$difference_bin =
	     adder_subractor_fas_3$borrow_bin ;
  assign adder_subractor_fas_3$sum_a = adder_subractor_rg_ip[35] ;
  assign adder_subractor_fas_3$sum_b = adder_subractor_rg_ip[3] ;
  assign adder_subractor_fas_3$sum_cin = adder_subractor_fas_3$borrow_bin ;

  // submodule adder_subractor_fas_30
  assign adder_subractor_fas_30$borrow_a = adder_subractor_rg_ip[62] ;
  assign adder_subractor_fas_30$borrow_b = adder_subractor_rg_ip[30] ;
  assign adder_subractor_fas_30$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_29$borrow :
	       adder_subractor_fas_29$carry ;
  assign adder_subractor_fas_30$carry_a = adder_subractor_rg_ip[62] ;
  assign adder_subractor_fas_30$carry_b = adder_subractor_rg_ip[30] ;
  assign adder_subractor_fas_30$carry_cin =
	     adder_subractor_fas_30$borrow_bin ;
  assign adder_subractor_fas_30$difference_a = adder_subractor_rg_ip[62] ;
  assign adder_subractor_fas_30$difference_b = adder_subractor_rg_ip[30] ;
  assign adder_subractor_fas_30$difference_bin =
	     adder_subractor_fas_30$borrow_bin ;
  assign adder_subractor_fas_30$sum_a = adder_subractor_rg_ip[62] ;
  assign adder_subractor_fas_30$sum_b = adder_subractor_rg_ip[30] ;
  assign adder_subractor_fas_30$sum_cin = adder_subractor_fas_30$borrow_bin ;

  // submodule adder_subractor_fas_31
  assign adder_subractor_fas_31$borrow_a = adder_subractor_rg_ip[63] ;
  assign adder_subractor_fas_31$borrow_b = adder_subractor_rg_ip[31] ;
  assign adder_subractor_fas_31$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_30$borrow :
	       adder_subractor_fas_30$carry ;
  assign adder_subractor_fas_31$carry_a = adder_subractor_rg_ip[63] ;
  assign adder_subractor_fas_31$carry_b = adder_subractor_rg_ip[31] ;
  assign adder_subractor_fas_31$carry_cin =
	     adder_subractor_fas_31$borrow_bin ;
  assign adder_subractor_fas_31$difference_a = adder_subractor_rg_ip[63] ;
  assign adder_subractor_fas_31$difference_b = adder_subractor_rg_ip[31] ;
  assign adder_subractor_fas_31$difference_bin =
	     adder_subractor_fas_31$borrow_bin ;
  assign adder_subractor_fas_31$sum_a = adder_subractor_rg_ip[63] ;
  assign adder_subractor_fas_31$sum_b = adder_subractor_rg_ip[31] ;
  assign adder_subractor_fas_31$sum_cin = adder_subractor_fas_31$borrow_bin ;

  // submodule adder_subractor_fas_4
  assign adder_subractor_fas_4$borrow_a = adder_subractor_rg_ip[36] ;
  assign adder_subractor_fas_4$borrow_b = adder_subractor_rg_ip[4] ;
  assign adder_subractor_fas_4$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_3$borrow :
	       adder_subractor_fas_3$carry ;
  assign adder_subractor_fas_4$carry_a = adder_subractor_rg_ip[36] ;
  assign adder_subractor_fas_4$carry_b = adder_subractor_rg_ip[4] ;
  assign adder_subractor_fas_4$carry_cin = adder_subractor_fas_4$borrow_bin ;
  assign adder_subractor_fas_4$difference_a = adder_subractor_rg_ip[36] ;
  assign adder_subractor_fas_4$difference_b = adder_subractor_rg_ip[4] ;
  assign adder_subractor_fas_4$difference_bin =
	     adder_subractor_fas_4$borrow_bin ;
  assign adder_subractor_fas_4$sum_a = adder_subractor_rg_ip[36] ;
  assign adder_subractor_fas_4$sum_b = adder_subractor_rg_ip[4] ;
  assign adder_subractor_fas_4$sum_cin = adder_subractor_fas_4$borrow_bin ;

  // submodule adder_subractor_fas_5
  assign adder_subractor_fas_5$borrow_a = adder_subractor_rg_ip[37] ;
  assign adder_subractor_fas_5$borrow_b = adder_subractor_rg_ip[5] ;
  assign adder_subractor_fas_5$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_4$borrow :
	       adder_subractor_fas_4$carry ;
  assign adder_subractor_fas_5$carry_a = adder_subractor_rg_ip[37] ;
  assign adder_subractor_fas_5$carry_b = adder_subractor_rg_ip[5] ;
  assign adder_subractor_fas_5$carry_cin = adder_subractor_fas_5$borrow_bin ;
  assign adder_subractor_fas_5$difference_a = adder_subractor_rg_ip[37] ;
  assign adder_subractor_fas_5$difference_b = adder_subractor_rg_ip[5] ;
  assign adder_subractor_fas_5$difference_bin =
	     adder_subractor_fas_5$borrow_bin ;
  assign adder_subractor_fas_5$sum_a = adder_subractor_rg_ip[37] ;
  assign adder_subractor_fas_5$sum_b = adder_subractor_rg_ip[5] ;
  assign adder_subractor_fas_5$sum_cin = adder_subractor_fas_5$borrow_bin ;

  // submodule adder_subractor_fas_6
  assign adder_subractor_fas_6$borrow_a = adder_subractor_rg_ip[38] ;
  assign adder_subractor_fas_6$borrow_b = adder_subractor_rg_ip[6] ;
  assign adder_subractor_fas_6$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_5$borrow :
	       adder_subractor_fas_5$carry ;
  assign adder_subractor_fas_6$carry_a = adder_subractor_rg_ip[38] ;
  assign adder_subractor_fas_6$carry_b = adder_subractor_rg_ip[6] ;
  assign adder_subractor_fas_6$carry_cin = adder_subractor_fas_6$borrow_bin ;
  assign adder_subractor_fas_6$difference_a = adder_subractor_rg_ip[38] ;
  assign adder_subractor_fas_6$difference_b = adder_subractor_rg_ip[6] ;
  assign adder_subractor_fas_6$difference_bin =
	     adder_subractor_fas_6$borrow_bin ;
  assign adder_subractor_fas_6$sum_a = adder_subractor_rg_ip[38] ;
  assign adder_subractor_fas_6$sum_b = adder_subractor_rg_ip[6] ;
  assign adder_subractor_fas_6$sum_cin = adder_subractor_fas_6$borrow_bin ;

  // submodule adder_subractor_fas_7
  assign adder_subractor_fas_7$borrow_a = adder_subractor_rg_ip[39] ;
  assign adder_subractor_fas_7$borrow_b = adder_subractor_rg_ip[7] ;
  assign adder_subractor_fas_7$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_6$borrow :
	       adder_subractor_fas_6$carry ;
  assign adder_subractor_fas_7$carry_a = adder_subractor_rg_ip[39] ;
  assign adder_subractor_fas_7$carry_b = adder_subractor_rg_ip[7] ;
  assign adder_subractor_fas_7$carry_cin = adder_subractor_fas_7$borrow_bin ;
  assign adder_subractor_fas_7$difference_a = adder_subractor_rg_ip[39] ;
  assign adder_subractor_fas_7$difference_b = adder_subractor_rg_ip[7] ;
  assign adder_subractor_fas_7$difference_bin =
	     adder_subractor_fas_7$borrow_bin ;
  assign adder_subractor_fas_7$sum_a = adder_subractor_rg_ip[39] ;
  assign adder_subractor_fas_7$sum_b = adder_subractor_rg_ip[7] ;
  assign adder_subractor_fas_7$sum_cin = adder_subractor_fas_7$borrow_bin ;

  // submodule adder_subractor_fas_8
  assign adder_subractor_fas_8$borrow_a = adder_subractor_rg_ip[40] ;
  assign adder_subractor_fas_8$borrow_b = adder_subractor_rg_ip[8] ;
  assign adder_subractor_fas_8$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_7$borrow :
	       adder_subractor_fas_7$carry ;
  assign adder_subractor_fas_8$carry_a = adder_subractor_rg_ip[40] ;
  assign adder_subractor_fas_8$carry_b = adder_subractor_rg_ip[8] ;
  assign adder_subractor_fas_8$carry_cin = adder_subractor_fas_8$borrow_bin ;
  assign adder_subractor_fas_8$difference_a = adder_subractor_rg_ip[40] ;
  assign adder_subractor_fas_8$difference_b = adder_subractor_rg_ip[8] ;
  assign adder_subractor_fas_8$difference_bin =
	     adder_subractor_fas_8$borrow_bin ;
  assign adder_subractor_fas_8$sum_a = adder_subractor_rg_ip[40] ;
  assign adder_subractor_fas_8$sum_b = adder_subractor_rg_ip[8] ;
  assign adder_subractor_fas_8$sum_cin = adder_subractor_fas_8$borrow_bin ;

  // submodule adder_subractor_fas_9
  assign adder_subractor_fas_9$borrow_a = adder_subractor_rg_ip[41] ;
  assign adder_subractor_fas_9$borrow_b = adder_subractor_rg_ip[9] ;
  assign adder_subractor_fas_9$borrow_bin =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_8$borrow :
	       adder_subractor_fas_8$carry ;
  assign adder_subractor_fas_9$carry_a = adder_subractor_rg_ip[41] ;
  assign adder_subractor_fas_9$carry_b = adder_subractor_rg_ip[9] ;
  assign adder_subractor_fas_9$carry_cin = adder_subractor_fas_9$borrow_bin ;
  assign adder_subractor_fas_9$difference_a = adder_subractor_rg_ip[41] ;
  assign adder_subractor_fas_9$difference_b = adder_subractor_rg_ip[9] ;
  assign adder_subractor_fas_9$difference_bin =
	     adder_subractor_fas_9$borrow_bin ;
  assign adder_subractor_fas_9$sum_a = adder_subractor_rg_ip[41] ;
  assign adder_subractor_fas_9$sum_b = adder_subractor_rg_ip[9] ;
  assign adder_subractor_fas_9$sum_cin = adder_subractor_fas_9$borrow_bin ;

  // submodule multiplier
  assign multiplier$inp_a = rg_a ;
  assign multiplier$inp_b = rg_b ;
  assign multiplier$EN_inp = CAN_FIRE_RL_rl_mul ;
  assign multiplier$EN_op = MUX_adder_subractor_got_ip$write_1__SEL_2 ;

  // remaining internal signals
  assign IF_adder_subractor_rg_sub_THEN_IF_adder_subrac_ETC___d271 =
	     adder_subractor_rg_sub ?
	       { _theResult___snd__h7087[31:2],
		 adder_subractor_fas_1$difference } :
	       { _theResult___snd__h8094[31:2], adder_subractor_fas_1$sum } ;
  assign IF_adder_subractor_rg_sub_THEN_IF_adder_subrac_ETC___d275 =
	     { IF_adder_subractor_rg_sub_THEN_IF_adder_subrac_ETC___d271[0],
	       IF_adder_subractor_rg_sub_THEN_theResult___snd_ETC__q1[0] } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d168 =
	     adder_subractor_rg_sub ?
	       adder_subractor_fas_31$borrow :
	       adder_subractor_fas_31$carry ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d276 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_3$difference :
		 adder_subractor_fas_3$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_2$difference :
		 adder_subractor_fas_2$sum,
	       IF_adder_subractor_rg_sub_THEN_IF_adder_subrac_ETC___d275 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d277 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_5$difference :
		 adder_subractor_fas_5$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_4$difference :
		 adder_subractor_fas_4$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d276 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d278 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_7$difference :
		 adder_subractor_fas_7$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_6$difference :
		 adder_subractor_fas_6$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d277 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d279 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_9$difference :
		 adder_subractor_fas_9$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_8$difference :
		 adder_subractor_fas_8$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d278 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d280 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_11$difference :
		 adder_subractor_fas_11$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_10$difference :
		 adder_subractor_fas_10$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d279 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d281 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_13$difference :
		 adder_subractor_fas_13$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_12$difference :
		 adder_subractor_fas_12$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d280 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d282 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_15$difference :
		 adder_subractor_fas_15$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_14$difference :
		 adder_subractor_fas_14$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d281 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d283 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_17$difference :
		 adder_subractor_fas_17$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_16$difference :
		 adder_subractor_fas_16$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d282 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d284 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_19$difference :
		 adder_subractor_fas_19$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_18$difference :
		 adder_subractor_fas_18$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d283 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d285 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_21$difference :
		 adder_subractor_fas_21$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_20$difference :
		 adder_subractor_fas_20$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d284 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d286 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_23$difference :
		 adder_subractor_fas_23$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_22$difference :
		 adder_subractor_fas_22$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d285 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d287 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_25$difference :
		 adder_subractor_fas_25$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_24$difference :
		 adder_subractor_fas_24$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d286 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d288 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_27$difference :
		 adder_subractor_fas_27$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_26$difference :
		 adder_subractor_fas_26$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d287 } ;
  assign IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d289 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_29$difference :
		 adder_subractor_fas_29$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_28$difference :
		 adder_subractor_fas_28$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d288 } ;
  assign IF_adder_subractor_rg_sub_THEN_theResult___snd_ETC__q1 =
	     adder_subractor_rg_sub ?
	       _theResult___snd__h7087 :
	       _theResult___snd__h8094 ;
  assign _theResult___snd__h7087 =
	     adder_subractor_fas_0$difference ? 32'd1 : 32'd0 ;
  assign _theResult___snd__h8094 = adder_subractor_fas_0$sum ? 32'd1 : 32'd0 ;
  assign new_value_carry_burrow__h5997 =
	     (adder_subractor_rg_sub &&
	      adder_subractor_rg_ip[63:32] > adder_subractor_rg_ip[31:0]) ?
	       ~IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d168 :
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d168 ;
  assign new_value_sum_difference__h5998 = { 1'd0, x__h15583 } ;
  assign x__h15583 =
	     { adder_subractor_rg_sub ?
		 adder_subractor_fas_31$difference :
		 adder_subractor_fas_31$sum,
	       adder_subractor_rg_sub ?
		 adder_subractor_fas_30$difference :
		 adder_subractor_fas_30$sum,
	       IF_adder_subractor_rg_sub_THEN_adder_subractor_ETC___d289 } ;
  assign x__h24017 =
	     { new_value_carry_burrow__h5997,
	       new_value_sum_difference__h5998 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        adder_subractor_got_ip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adder_subractor_rg_ip <= `BSV_ASSIGNMENT_DELAY 64'd0;
	adder_subractor_rg_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_a <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_b <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (adder_subractor_got_ip$EN)
	  adder_subractor_got_ip <= `BSV_ASSIGNMENT_DELAY
	      adder_subractor_got_ip$D_IN;
	if (adder_subractor_rg_ip$EN)
	  adder_subractor_rg_ip <= `BSV_ASSIGNMENT_DELAY
	      adder_subractor_rg_ip$D_IN;
	if (adder_subractor_rg_sub$EN)
	  adder_subractor_rg_sub <= `BSV_ASSIGNMENT_DELAY
	      adder_subractor_rg_sub$D_IN;
	if (got_a$EN) got_a <= `BSV_ASSIGNMENT_DELAY got_a$D_IN;
	if (got_b$EN) got_b <= `BSV_ASSIGNMENT_DELAY got_b$D_IN;
	if (got_c$EN) got_c <= `BSV_ASSIGNMENT_DELAY got_c$D_IN;
	if (rg_a$EN) rg_a <= `BSV_ASSIGNMENT_DELAY rg_a$D_IN;
	if (rg_b$EN) rg_b <= `BSV_ASSIGNMENT_DELAY rg_b$D_IN;
	if (rg_c$EN) rg_c <= `BSV_ASSIGNMENT_DELAY rg_c$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    adder_subractor_got_ip = 1'h0;
    adder_subractor_rg_ip = 64'hAAAAAAAAAAAAAAAA;
    adder_subractor_rg_sub = 1'h0;
    got_a = 1'h0;
    got_b = 1'h0;
    got_c = 1'h0;
    rg_a = 16'hAAAA;
    rg_b = 16'hAAAA;
    rg_c = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMac

